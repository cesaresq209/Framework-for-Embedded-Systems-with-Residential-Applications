
GPIO_Framework.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00802800  00802800  0000092a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008a4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000012  000048a4  000008a4  00000918  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .comment      00000030  00000000  00000000  0000092a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000095c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e8  00000000  00000000  0000099c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000043c8  00000000  00000000  00000b84  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002c44  00000000  00000000  00004f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ecf  00000000  00000000  00007b90  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000031c  00000000  00000000  00008a60  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001c8d  00000000  00000000  00008d7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005b9  00000000  00000000  0000aa09  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  0000afc2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__ctors_end>
   4:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
   8:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
   c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  10:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  14:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  18:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  1c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  20:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  24:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  28:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  2c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  30:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  34:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  38:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  3c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  40:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  44:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  48:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  4c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  50:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  54:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  58:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  5c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  60:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  64:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  68:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  6c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  70:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  74:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  78:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  7c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  80:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  84:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  88:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  8c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  90:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  94:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  98:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  9c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>

000000a0 <__ctors_end>:
  a0:	11 24       	eor	r1, r1
  a2:	1f be       	out	0x3f, r1	; 63
  a4:	cf ef       	ldi	r28, 0xFF	; 255
  a6:	cd bf       	out	0x3d, r28	; 61
  a8:	df e3       	ldi	r29, 0x3F	; 63
  aa:	de bf       	out	0x3e, r29	; 62

000000ac <__do_clear_bss>:
  ac:	28 e2       	ldi	r18, 0x28	; 40
  ae:	a0 e0       	ldi	r26, 0x00	; 0
  b0:	b8 e2       	ldi	r27, 0x28	; 40
  b2:	01 c0       	rjmp	.+2      	; 0xb6 <.do_clear_bss_start>

000000b4 <.do_clear_bss_loop>:
  b4:	1d 92       	st	X+, r1

000000b6 <.do_clear_bss_start>:
  b6:	a0 30       	cpi	r26, 0x00	; 0
  b8:	b2 07       	cpc	r27, r18
  ba:	e1 f7       	brne	.-8      	; 0xb4 <.do_clear_bss_loop>
  bc:	0e 94 12 01 	call	0x224	; 0x224 <main>
  c0:	0c 94 50 04 	jmp	0x8a0	; 0x8a0 <_exit>

000000c4 <__bad_interrupt>:
  c4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c8 <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
  c8:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <system_init>
  cc:	08 95       	ret

000000ce <printVoltage>:
	ADC_0_init();
}

void configUart(void)
{
	USART_0_init();
  ce:	8f 92       	push	r8
  d0:	9f 92       	push	r9
  d2:	af 92       	push	r10
  d4:	bf 92       	push	r11
  d6:	ef 92       	push	r14
  d8:	ff 92       	push	r15
  da:	0f 93       	push	r16
  dc:	1f 93       	push	r17
  de:	cf 93       	push	r28
  e0:	df 93       	push	r29
  e2:	cd b7       	in	r28, 0x3d	; 61
  e4:	de b7       	in	r29, 0x3e	; 62
  e6:	62 97       	sbiw	r28, 0x12	; 18
  e8:	cd bf       	out	0x3d, r28	; 61
  ea:	de bf       	out	0x3e, r29	; 62
  ec:	4b 01       	movw	r8, r22
  ee:	5c 01       	movw	r10, r24
  f0:	82 e1       	ldi	r24, 0x12	; 18
  f2:	e4 ea       	ldi	r30, 0xA4	; 164
  f4:	f8 e4       	ldi	r31, 0x48	; 72
  f6:	de 01       	movw	r26, r28
  f8:	11 96       	adiw	r26, 0x01	; 1
  fa:	01 90       	ld	r0, Z+
  fc:	0d 92       	st	X+, r0
  fe:	8a 95       	dec	r24
 100:	e1 f7       	brne	.-8      	; 0xfa <printVoltage+0x2c>
 102:	8e 01       	movw	r16, r28
 104:	0f 5f       	subi	r16, 0xFF	; 255
 106:	1f 4f       	sbci	r17, 0xFF	; 255
 108:	7e 01       	movw	r14, r28
 10a:	82 e1       	ldi	r24, 0x12	; 18
 10c:	e8 0e       	add	r14, r24
 10e:	f1 1c       	adc	r15, r1
 110:	f8 01       	movw	r30, r16
 112:	81 91       	ld	r24, Z+
 114:	8f 01       	movw	r16, r30
 116:	0e 94 0f 02 	call	0x41e	; 0x41e <USART_0_write>
 11a:	0e 15       	cp	r16, r14
 11c:	1f 05       	cpc	r17, r15
 11e:	c1 f7       	brne	.-16     	; 0x110 <__EEPROM_REGION_LENGTH__+0x10>
 120:	20 e0       	ldi	r18, 0x00	; 0
 122:	30 e0       	ldi	r19, 0x00	; 0
 124:	40 e4       	ldi	r20, 0x40	; 64
 126:	52 e4       	ldi	r21, 0x42	; 66
 128:	c5 01       	movw	r24, r10
 12a:	b4 01       	movw	r22, r8
 12c:	0e 94 18 02 	call	0x430	; 0x430 <__addsf3>
 130:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__fixsfsi>
 134:	86 2f       	mov	r24, r22
 136:	0e 94 0f 02 	call	0x41e	; 0x41e <USART_0_write>
 13a:	8e e2       	ldi	r24, 0x2E	; 46
 13c:	0e 94 0f 02 	call	0x41e	; 0x41e <USART_0_write>
 140:	c5 01       	movw	r24, r10
 142:	b4 01       	movw	r22, r8
 144:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__fixsfsi>
 148:	07 2e       	mov	r0, r23
 14a:	00 0c       	add	r0, r0
 14c:	88 0b       	sbc	r24, r24
 14e:	99 0b       	sbc	r25, r25
 150:	0e 94 33 03 	call	0x666	; 0x666 <__floatsisf>
 154:	9b 01       	movw	r18, r22
 156:	ac 01       	movw	r20, r24
 158:	c5 01       	movw	r24, r10
 15a:	b4 01       	movw	r22, r8
 15c:	0e 94 17 02 	call	0x42e	; 0x42e <__subsf3>
 160:	20 e0       	ldi	r18, 0x00	; 0
 162:	30 e0       	ldi	r19, 0x00	; 0
 164:	40 e2       	ldi	r20, 0x20	; 32
 166:	51 e4       	ldi	r21, 0x41	; 65
 168:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__mulsf3>
 16c:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__fixsfsi>
 170:	80 e3       	ldi	r24, 0x30	; 48
 172:	86 0f       	add	r24, r22
 174:	0e 94 0f 02 	call	0x41e	; 0x41e <USART_0_write>
 178:	20 e0       	ldi	r18, 0x00	; 0
 17a:	30 e0       	ldi	r19, 0x00	; 0
 17c:	40 e2       	ldi	r20, 0x20	; 32
 17e:	51 e4       	ldi	r21, 0x41	; 65
 180:	c5 01       	movw	r24, r10
 182:	b4 01       	movw	r22, r8
 184:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__mulsf3>
 188:	4b 01       	movw	r8, r22
 18a:	5c 01       	movw	r10, r24
 18c:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__fixsfsi>
 190:	07 2e       	mov	r0, r23
 192:	00 0c       	add	r0, r0
 194:	88 0b       	sbc	r24, r24
 196:	99 0b       	sbc	r25, r25
 198:	0e 94 33 03 	call	0x666	; 0x666 <__floatsisf>
 19c:	9b 01       	movw	r18, r22
 19e:	ac 01       	movw	r20, r24
 1a0:	c5 01       	movw	r24, r10
 1a2:	b4 01       	movw	r22, r8
 1a4:	0e 94 17 02 	call	0x42e	; 0x42e <__subsf3>
 1a8:	20 e0       	ldi	r18, 0x00	; 0
 1aa:	30 e0       	ldi	r19, 0x00	; 0
 1ac:	40 e2       	ldi	r20, 0x20	; 32
 1ae:	51 e4       	ldi	r21, 0x41	; 65
 1b0:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__mulsf3>
 1b4:	20 e0       	ldi	r18, 0x00	; 0
 1b6:	30 e0       	ldi	r19, 0x00	; 0
 1b8:	40 e4       	ldi	r20, 0x40	; 64
 1ba:	52 e4       	ldi	r21, 0x42	; 66
 1bc:	0e 94 18 02 	call	0x430	; 0x430 <__addsf3>
 1c0:	0e 94 02 03 	call	0x604	; 0x604 <__fixunssfsi>
 1c4:	86 2f       	mov	r24, r22
 1c6:	0e 94 0f 02 	call	0x41e	; 0x41e <USART_0_write>
 1ca:	62 96       	adiw	r28, 0x12	; 18
 1cc:	cd bf       	out	0x3d, r28	; 61
 1ce:	de bf       	out	0x3e, r29	; 62
 1d0:	df 91       	pop	r29
 1d2:	cf 91       	pop	r28
 1d4:	1f 91       	pop	r17
 1d6:	0f 91       	pop	r16
 1d8:	ff 90       	pop	r15
 1da:	ef 90       	pop	r14
 1dc:	bf 90       	pop	r11
 1de:	af 90       	pop	r10
 1e0:	9f 90       	pop	r9
 1e2:	8f 90       	pop	r8
 1e4:	08 95       	ret

000001e6 <configGpio>:
 1e6:	e0 ee       	ldi	r30, 0xE0	; 224
 1e8:	f5 e0       	ldi	r31, 0x05	; 5
 1ea:	82 81       	ldd	r24, Z+2	; 0x02
 1ec:	25 9a       	sbi	0x04, 5	; 4
 1ee:	a5 e3       	ldi	r26, 0x35	; 53
 1f0:	b4 e0       	ldi	r27, 0x04	; 4
 1f2:	9c 91       	ld	r25, X
 1f4:	97 7f       	andi	r25, 0xF7	; 247
 1f6:	9c 93       	st	X, r25
 1f8:	2d 98       	cbi	0x05, 5	; 5
 1fa:	40 9a       	sbi	0x08, 0	; 8
 1fc:	a0 e5       	ldi	r26, 0x50	; 80
 1fe:	b4 e0       	ldi	r27, 0x04	; 4
 200:	9c 91       	ld	r25, X
 202:	97 7f       	andi	r25, 0xF7	; 247
 204:	9c 93       	st	X, r25
 206:	41 98       	cbi	0x08, 1	; 8
 208:	a1 e5       	ldi	r26, 0x51	; 81
 20a:	b4 e0       	ldi	r27, 0x04	; 4
 20c:	9c 91       	ld	r25, X
 20e:	97 7f       	andi	r25, 0xF7	; 247
 210:	9c 93       	st	X, r25
 212:	60 98       	cbi	0x0c, 0	; 12
 214:	a0 e7       	ldi	r26, 0x70	; 112
 216:	b4 e0       	ldi	r27, 0x04	; 4
 218:	9c 91       	ld	r25, X
 21a:	97 7f       	andi	r25, 0xF7	; 247
 21c:	9c 93       	st	X, r25
 21e:	8b 7f       	andi	r24, 0xFB	; 251
 220:	82 83       	std	Z+2, r24	; 0x02
 222:	08 95       	ret

00000224 <main>:
*. Description:
*. C entry point, executes the systems initialization and application
*.
\********************************************************************/
int main(void)
{
 224:	cf 93       	push	r28
 226:	df 93       	push	r29
 228:	cd b7       	in	r28, 0x3d	; 61
 22a:	de b7       	in	r29, 0x3e	; 62
 22c:	26 97       	sbiw	r28, 0x06	; 6
 22e:	cd bf       	out	0x3d, r28	; 61
 230:	de bf       	out	0x3e, r29	; 62
    States_t  current_State = HW_INIT;
    uint8_t   ledState      = LED_OFF;
	
    volatile uint16_t ADC_Value     = 0;
 232:	19 82       	std	Y+1, r1	; 0x01
 234:	1a 82       	std	Y+2, r1	; 0x02
    volatile float    voltage       = 0;
 236:	1b 82       	std	Y+3, r1	; 0x03
 238:	1c 82       	std	Y+4, r1	; 0x04
 23a:	1d 82       	std	Y+5, r1	; 0x05
 23c:	1e 82       	std	Y+6, r1	; 0x06
*. C entry point, executes the systems initialization and application
*.
\********************************************************************/
int main(void)
{
    States_t  current_State = HW_INIT;
 23e:	10 e0       	ldi	r17, 0x00	; 0
                // Disable ADC
                ADC_0_disable();
                // Initialize ADC
                configAdc();
                // Perform ADC Calibration
                ADC0.CALIB = ADC_DUTYCYC_DUTY25_gc; /* 50% Duty cycle */
 240:	0f 2e       	mov	r0, r31
 242:	e1 2c       	mov	r14, r1
 244:	f6 e0       	ldi	r31, 0x06	; 6
 246:	ff 2e       	mov	r15, r31
 248:	f0 2d       	mov	r31, r0
 24a:	01 e0       	ldi	r16, 0x01	; 1
	
    volatile uint16_t ADC_Value     = 0;
    volatile float    voltage       = 0;
    while (true)
    {
        switch (current_State)
 24c:	11 30       	cpi	r17, 0x01	; 1
 24e:	d9 f0       	breq	.+54     	; 0x286 <main+0x62>
 250:	30 f0       	brcs	.+12     	; 0x25e <main+0x3a>
 252:	12 30       	cpi	r17, 0x02	; 2
 254:	f1 f0       	breq	.+60     	; 0x292 <main+0x6e>
 256:	13 30       	cpi	r17, 0x03	; 3
 258:	09 f4       	brne	.+2      	; 0x25c <main+0x38>
 25a:	44 c0       	rjmp	.+136    	; 0x2e4 <main+0xc0>
 25c:	f7 cf       	rjmp	.-18     	; 0x24c <main+0x28>
        {
            case HW_INIT:
                // Initialize basic hardware functionality
                HWInit();
 25e:	0e 94 64 00 	call	0xc8	; 0xc8 <atmel_start_init>
                // Initialize GPIOs
				configGpio();
 262:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <configGpio>
                // Disable ADC
                ADC_0_disable();
 266:	0e 94 92 01 	call	0x324	; 0x324 <ADC_0_disable>
    PORTMUX.USARTROUTEA = uartMux;
}

void configAdc(void)
{
	ADC_0_init();
 26a:	0e 94 84 01 	call	0x308	; 0x308 <ADC_0_init>
                // Disable ADC
                ADC_0_disable();
                // Initialize ADC
                configAdc();
                // Perform ADC Calibration
                ADC0.CALIB = ADC_DUTYCYC_DUTY25_gc; /* 50% Duty cycle */
 26e:	f7 01       	movw	r30, r14
 270:	06 8b       	std	Z+22, r16	; 0x16
                // Enable ADC
                ADC_0_enable();
 272:	0e 94 8c 01 	call	0x318	; 0x318 <ADC_0_enable>
                // Disable Uart
                USART_0_disable();
 276:	0e 94 01 02 	call	0x402	; 0x402 <USART_0_disable>
	ADC_0_init();
}

void configUart(void)
{
	USART_0_init();
 27a:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <USART_0_init>
                // Disable Uart
                USART_0_disable();
                // Configure UART
                configUart();
                // Enable UART
                USART_0_enable();
 27e:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <USART_0_enable>
                current_State = WAIT;
 282:	10 2f       	mov	r17, r16
                break;
 284:	e3 cf       	rjmp	.-58     	; 0x24c <main+0x28>
            case WAIT:
                if (USART_0_read() == 48)
 286:	0e 94 07 02 	call	0x40e	; 0x40e <USART_0_read>
 28a:	80 33       	cpi	r24, 0x30	; 48
 28c:	f9 f6       	brne	.-66     	; 0x24c <main+0x28>
                {
                    current_State = MEASURE_VOLTAGE;
 28e:	12 e0       	ldi	r17, 0x02	; 2
 290:	dd cf       	rjmp	.-70     	; 0x24c <main+0x28>
                }
                break;
            case MEASURE_VOLTAGE:
                // Initialize Conversion
                ADC_0_start_conversion(0);
 292:	80 e0       	ldi	r24, 0x00	; 0
 294:	0e 94 98 01 	call	0x330	; 0x330 <ADC_0_start_conversion>
                // Wait for Conversion to be done
                while (ADC_0_is_conversion_done() != ADC_CONVERSION_READY)
 298:	0e 94 9e 01 	call	0x33c	; 0x33c <ADC_0_is_conversion_done>
 29c:	88 23       	and	r24, r24
 29e:	e1 f3       	breq	.-8      	; 0x298 <main+0x74>
                {
                }
                ADC_Value = ADC_0_get_conversion_result();
 2a0:	0e 94 a2 01 	call	0x344	; 0x344 <ADC_0_get_conversion_result>
 2a4:	89 83       	std	Y+1, r24	; 0x01
 2a6:	9a 83       	std	Y+2, r25	; 0x02
                voltage   = (3.28 * ADC_Value) / ADC_STEPS;
 2a8:	69 81       	ldd	r22, Y+1	; 0x01
 2aa:	7a 81       	ldd	r23, Y+2	; 0x02
 2ac:	80 e0       	ldi	r24, 0x00	; 0
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	0e 94 31 03 	call	0x662	; 0x662 <__floatunsisf>
 2b4:	25 e8       	ldi	r18, 0x85	; 133
 2b6:	3b ee       	ldi	r19, 0xEB	; 235
 2b8:	41 e5       	ldi	r20, 0x51	; 81
 2ba:	50 e4       	ldi	r21, 0x40	; 64
 2bc:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__mulsf3>
 2c0:	20 e0       	ldi	r18, 0x00	; 0
 2c2:	30 ec       	ldi	r19, 0xC0	; 192
 2c4:	4f e7       	ldi	r20, 0x7F	; 127
 2c6:	54 e4       	ldi	r21, 0x44	; 68
 2c8:	0e 94 89 02 	call	0x512	; 0x512 <__divsf3>
 2cc:	6b 83       	std	Y+3, r22	; 0x03
 2ce:	7c 83       	std	Y+4, r23	; 0x04
 2d0:	8d 83       	std	Y+5, r24	; 0x05
 2d2:	9e 83       	std	Y+6, r25	; 0x06
                printVoltage(voltage);
 2d4:	6b 81       	ldd	r22, Y+3	; 0x03
 2d6:	7c 81       	ldd	r23, Y+4	; 0x04
 2d8:	8d 81       	ldd	r24, Y+5	; 0x05
 2da:	9e 81       	ldd	r25, Y+6	; 0x06
 2dc:	0e 94 67 00 	call	0xce	; 0xce <printVoltage>
                current_State = UPDATE_LED;
 2e0:	13 e0       	ldi	r17, 0x03	; 3
                break;
 2e2:	b4 cf       	rjmp	.-152    	; 0x24c <main+0x28>
            case UPDATE_LED:
                if (voltage < 2.5)
 2e4:	6b 81       	ldd	r22, Y+3	; 0x03
 2e6:	7c 81       	ldd	r23, Y+4	; 0x04
 2e8:	8d 81       	ldd	r24, Y+5	; 0x05
 2ea:	9e 81       	ldd	r25, Y+6	; 0x06
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
 2ec:	20 e0       	ldi	r18, 0x00	; 0
 2ee:	30 e0       	ldi	r19, 0x00	; 0
 2f0:	40 e2       	ldi	r20, 0x20	; 32
 2f2:	50 e4       	ldi	r21, 0x40	; 64
 2f4:	0e 94 84 02 	call	0x508	; 0x508 <__cmpsf2>
 2f8:	88 23       	and	r24, r24
 2fa:	1c f0       	brlt	.+6      	; 0x302 <main+0xde>
		VPORTB.OUT |= (1 << pin);
 2fc:	2d 9a       	sbi	0x05, 5	; 5
                else
                {
                    ledState = LED_OFF;
                }
				PORTB_set_pin_level(LED_PIN,(bool)ledState);
                current_State = WAIT;
 2fe:	10 2f       	mov	r17, r16
 300:	a5 cf       	rjmp	.-182    	; 0x24c <main+0x28>
	} else {
		VPORTB.OUT &= ~(1 << pin);
 302:	2d 98       	cbi	0x05, 5	; 5
 304:	10 2f       	mov	r17, r16
 306:	a2 cf       	rjmp	.-188    	; 0x24c <main+0x28>

00000308 <ADC_0_init>:

	// ADC0.CALIB = ADC_DUTYCYC_DUTY50_gc; /* 50% Duty cycle */

	// ADC0.CTRLB = ADC_SAMPNUM_ACC1_gc; /* 1 ADC sample */

	ADC0.CTRLC = ADC_PRESC_DIV4_gc      /* CLK_PER divided by 4 */
 308:	e0 e0       	ldi	r30, 0x00	; 0
 30a:	f6 e0       	ldi	r31, 0x06	; 6
 30c:	81 e1       	ldi	r24, 0x11	; 17
 30e:	82 83       	std	Z+2, r24	; 0x02

	// ADC0.WINHT = 0x0; /* Window Comparator High Threshold: 0x0 */

	// ADC0.WINLT = 0x0; /* Window Comparator Low Threshold: 0x0 */

	ADC0.CTRLA = 1 << ADC_ENABLE_bp     /* ADC Enable: enabled */
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	80 83       	st	Z, r24
	             | 0 << ADC_FREERUN_bp  /* ADC Freerun mode: disabled */
	             | ADC_RESSEL_10BIT_gc  /* 10-bit mode */
	             | 0 << ADC_RUNSTBY_bp; /* Run standby mode: disabled */

	return 0;
}
 314:	80 e0       	ldi	r24, 0x00	; 0
 316:	08 95       	ret

00000318 <ADC_0_enable>:
 *
 * \return Nothing
 */
void ADC_0_enable()
{
	ADC0.CTRLA |= ADC_ENABLE_bm;
 318:	e0 e0       	ldi	r30, 0x00	; 0
 31a:	f6 e0       	ldi	r31, 0x06	; 6
 31c:	80 81       	ld	r24, Z
 31e:	81 60       	ori	r24, 0x01	; 1
 320:	80 83       	st	Z, r24
 322:	08 95       	ret

00000324 <ADC_0_disable>:
 *
 * \return Nothing
 */
void ADC_0_disable()
{
	ADC0.CTRLA &= ~ADC_ENABLE_bm;
 324:	e0 e0       	ldi	r30, 0x00	; 0
 326:	f6 e0       	ldi	r31, 0x06	; 6
 328:	80 81       	ld	r24, Z
 32a:	8e 7f       	andi	r24, 0xFE	; 254
 32c:	80 83       	st	Z, r24
 32e:	08 95       	ret

00000330 <ADC_0_start_conversion>:
 *
 * \return Nothing
 */
void ADC_0_start_conversion(adc_0_channel_t channel)
{
	ADC0.MUXPOS  = channel;
 330:	e0 e0       	ldi	r30, 0x00	; 0
 332:	f6 e0       	ldi	r31, 0x06	; 6
 334:	86 83       	std	Z+6, r24	; 0x06
	ADC0.COMMAND = ADC_STCONV_bm;
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	80 87       	std	Z+8, r24	; 0x08
 33a:	08 95       	ret

0000033c <ADC_0_is_conversion_done>:
 * \retval true The ADC conversion is done
 * \retval false The ADC converison is not done
 */
bool ADC_0_is_conversion_done()
{
	return (ADC0.INTFLAGS & ADC_RESRDY_bm);
 33c:	80 91 0b 06 	lds	r24, 0x060B	; 0x80060b <__TEXT_REGION_LENGTH__+0x7f460b>
}
 340:	81 70       	andi	r24, 0x01	; 1
 342:	08 95       	ret

00000344 <ADC_0_get_conversion_result>:
 *
 * \return Conversion result read from the ADC_0 ADC module
 */
adc_result_t ADC_0_get_conversion_result(void)
{
	return (ADC0.RES);
 344:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x7f4610>
 348:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x7f4611>
}
 34c:	08 95       	ret

0000034e <BOD_init>:
	//		 | BOD_VLMCFG_BELOW_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
 34e:	80 e0       	ldi	r24, 0x00	; 0
 350:	08 95       	ret

00000352 <CLKCTRL_init>:
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
}
 352:	80 e0       	ldi	r24, 0x00	; 0
 354:	08 95       	ret

00000356 <CPUINT_init>:
	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	return 0;
}
 356:	80 e0       	ldi	r24, 0x00	; 0
 358:	08 95       	ret

0000035a <mcu_init>:
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	USART_0_init();
 35a:	e0 e1       	ldi	r30, 0x10	; 16
 35c:	f4 e0       	ldi	r31, 0x04	; 4
 35e:	80 81       	ld	r24, Z
 360:	88 60       	ori	r24, 0x08	; 8
 362:	81 93       	st	Z+, r24
 364:	e8 31       	cpi	r30, 0x18	; 24
 366:	84 e0       	ldi	r24, 0x04	; 4
 368:	f8 07       	cpc	r31, r24
 36a:	c9 f7       	brne	.-14     	; 0x35e <mcu_init+0x4>
 36c:	e0 e3       	ldi	r30, 0x30	; 48
 36e:	f4 e0       	ldi	r31, 0x04	; 4
 370:	80 81       	ld	r24, Z
 372:	88 60       	ori	r24, 0x08	; 8
 374:	81 93       	st	Z+, r24
 376:	e8 33       	cpi	r30, 0x38	; 56
 378:	84 e0       	ldi	r24, 0x04	; 4
 37a:	f8 07       	cpc	r31, r24
 37c:	c9 f7       	brne	.-14     	; 0x370 <mcu_init+0x16>
 37e:	e0 e5       	ldi	r30, 0x50	; 80
 380:	f4 e0       	ldi	r31, 0x04	; 4
 382:	80 81       	ld	r24, Z
 384:	88 60       	ori	r24, 0x08	; 8
 386:	81 93       	st	Z+, r24
 388:	e8 35       	cpi	r30, 0x58	; 88
 38a:	84 e0       	ldi	r24, 0x04	; 4
 38c:	f8 07       	cpc	r31, r24
 38e:	c9 f7       	brne	.-14     	; 0x382 <mcu_init+0x28>
 390:	e0 e7       	ldi	r30, 0x70	; 112
 392:	f4 e0       	ldi	r31, 0x04	; 4
 394:	80 81       	ld	r24, Z
 396:	88 60       	ori	r24, 0x08	; 8
 398:	81 93       	st	Z+, r24
 39a:	e8 37       	cpi	r30, 0x78	; 120
 39c:	84 e0       	ldi	r24, 0x04	; 4
 39e:	f8 07       	cpc	r31, r24
 3a0:	c9 f7       	brne	.-14     	; 0x394 <mcu_init+0x3a>
 3a2:	e0 e9       	ldi	r30, 0x90	; 144
 3a4:	f4 e0       	ldi	r31, 0x04	; 4
 3a6:	80 81       	ld	r24, Z
 3a8:	88 60       	ori	r24, 0x08	; 8
 3aa:	81 93       	st	Z+, r24
 3ac:	e8 39       	cpi	r30, 0x98	; 152
 3ae:	84 e0       	ldi	r24, 0x04	; 4
 3b0:	f8 07       	cpc	r31, r24
 3b2:	c9 f7       	brne	.-14     	; 0x3a6 <mcu_init+0x4c>
 3b4:	e0 eb       	ldi	r30, 0xB0	; 176
 3b6:	f4 e0       	ldi	r31, 0x04	; 4
 3b8:	80 81       	ld	r24, Z
 3ba:	88 60       	ori	r24, 0x08	; 8
 3bc:	81 93       	st	Z+, r24
 3be:	e8 3b       	cpi	r30, 0xB8	; 184
 3c0:	84 e0       	ldi	r24, 0x04	; 4
 3c2:	f8 07       	cpc	r31, r24
 3c4:	c9 f7       	brne	.-14     	; 0x3b8 <mcu_init+0x5e>
 3c6:	08 95       	ret

000003c8 <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
 3c8:	0e 94 ad 01 	call	0x35a	; 0x35a <mcu_init>

	CLKCTRL_init();
 3cc:	0e 94 a9 01 	call	0x352	; 0x352 <CLKCTRL_init>

	//ADC_0_initialization();

	//USART_0_initialization();

	CPUINT_init();
 3d0:	0e 94 ab 01 	call	0x356	; 0x356 <CPUINT_init>

	SLPCTRL_init();
 3d4:	0e 94 ef 01 	call	0x3de	; 0x3de <SLPCTRL_init>

	BOD_init();
 3d8:	0e 94 a7 01 	call	0x34e	; 0x34e <BOD_init>
 3dc:	08 95       	ret

000003de <SLPCTRL_init>:

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
}
 3de:	80 e0       	ldi	r24, 0x00	; 0
 3e0:	08 95       	ret

000003e2 <USART_0_init>:
 * \retval false Data completely shifted out if the USART shift register
 */
bool USART_0_is_tx_busy()
{
	return (!(USART1.STATUS & USART_TXCIF_bm));
}
 3e2:	e0 e2       	ldi	r30, 0x20	; 32
 3e4:	f8 e0       	ldi	r31, 0x08	; 8
 3e6:	8d e6       	ldi	r24, 0x6D	; 109
 3e8:	95 e0       	ldi	r25, 0x05	; 5
 3ea:	80 87       	std	Z+8, r24	; 0x08
 3ec:	91 87       	std	Z+9, r25	; 0x09
 3ee:	80 ec       	ldi	r24, 0xC0	; 192
 3f0:	86 83       	std	Z+6, r24	; 0x06
 3f2:	80 e0       	ldi	r24, 0x00	; 0
 3f4:	08 95       	ret

000003f6 <USART_0_enable>:
 3f6:	e0 e2       	ldi	r30, 0x20	; 32
 3f8:	f8 e0       	ldi	r31, 0x08	; 8
 3fa:	86 81       	ldd	r24, Z+6	; 0x06
 3fc:	80 6c       	ori	r24, 0xC0	; 192
 3fe:	86 83       	std	Z+6, r24	; 0x06
 400:	08 95       	ret

00000402 <USART_0_disable>:
 402:	e0 e2       	ldi	r30, 0x20	; 32
 404:	f8 e0       	ldi	r31, 0x08	; 8
 406:	86 81       	ldd	r24, Z+6	; 0x06
 408:	8f 73       	andi	r24, 0x3F	; 63
 40a:	86 83       	std	Z+6, r24	; 0x06
 40c:	08 95       	ret

0000040e <USART_0_read>:
 *
 * \return Data read from the USART_0 module
 */
uint8_t USART_0_read()
{
	while (!(USART1.STATUS & USART_RXCIF_bm))
 40e:	e0 e2       	ldi	r30, 0x20	; 32
 410:	f8 e0       	ldi	r31, 0x08	; 8
 412:	84 81       	ldd	r24, Z+4	; 0x04
 414:	88 23       	and	r24, r24
 416:	ec f7       	brge	.-6      	; 0x412 <USART_0_read+0x4>
		;
	return USART1.RXDATAL;
 418:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x7f4820>
}
 41c:	08 95       	ret

0000041e <USART_0_write>:
 *
 * \return Nothing
 */
void USART_0_write(const uint8_t data)
{
	while (!(USART1.STATUS & USART_DREIF_bm))
 41e:	e0 e2       	ldi	r30, 0x20	; 32
 420:	f8 e0       	ldi	r31, 0x08	; 8
 422:	94 81       	ldd	r25, Z+4	; 0x04
 424:	95 ff       	sbrs	r25, 5
 426:	fd cf       	rjmp	.-6      	; 0x422 <USART_0_write+0x4>
		;
	USART1.TXDATAL = data;
 428:	80 93 22 08 	sts	0x0822, r24	; 0x800822 <__TEXT_REGION_LENGTH__+0x7f4822>
 42c:	08 95       	ret

0000042e <__subsf3>:
 42e:	50 58       	subi	r21, 0x80	; 128

00000430 <__addsf3>:
 430:	bb 27       	eor	r27, r27
 432:	aa 27       	eor	r26, r26
 434:	0e 94 2f 02 	call	0x45e	; 0x45e <__addsf3x>
 438:	0c 94 a9 03 	jmp	0x752	; 0x752 <__fp_round>
 43c:	0e 94 9b 03 	call	0x736	; 0x736 <__fp_pscA>
 440:	38 f0       	brcs	.+14     	; 0x450 <__addsf3+0x20>
 442:	0e 94 a2 03 	call	0x744	; 0x744 <__fp_pscB>
 446:	20 f0       	brcs	.+8      	; 0x450 <__addsf3+0x20>
 448:	39 f4       	brne	.+14     	; 0x458 <__addsf3+0x28>
 44a:	9f 3f       	cpi	r25, 0xFF	; 255
 44c:	19 f4       	brne	.+6      	; 0x454 <__addsf3+0x24>
 44e:	26 f4       	brtc	.+8      	; 0x458 <__addsf3+0x28>
 450:	0c 94 98 03 	jmp	0x730	; 0x730 <__fp_nan>
 454:	0e f4       	brtc	.+2      	; 0x458 <__addsf3+0x28>
 456:	e0 95       	com	r30
 458:	e7 fb       	bst	r30, 7
 45a:	0c 94 92 03 	jmp	0x724	; 0x724 <__fp_inf>

0000045e <__addsf3x>:
 45e:	e9 2f       	mov	r30, r25
 460:	0e 94 ba 03 	call	0x774	; 0x774 <__fp_split3>
 464:	58 f3       	brcs	.-42     	; 0x43c <__addsf3+0xc>
 466:	ba 17       	cp	r27, r26
 468:	62 07       	cpc	r22, r18
 46a:	73 07       	cpc	r23, r19
 46c:	84 07       	cpc	r24, r20
 46e:	95 07       	cpc	r25, r21
 470:	20 f0       	brcs	.+8      	; 0x47a <__addsf3x+0x1c>
 472:	79 f4       	brne	.+30     	; 0x492 <__addsf3x+0x34>
 474:	a6 f5       	brtc	.+104    	; 0x4de <__addsf3x+0x80>
 476:	0c 94 dc 03 	jmp	0x7b8	; 0x7b8 <__fp_zero>
 47a:	0e f4       	brtc	.+2      	; 0x47e <__addsf3x+0x20>
 47c:	e0 95       	com	r30
 47e:	0b 2e       	mov	r0, r27
 480:	ba 2f       	mov	r27, r26
 482:	a0 2d       	mov	r26, r0
 484:	0b 01       	movw	r0, r22
 486:	b9 01       	movw	r22, r18
 488:	90 01       	movw	r18, r0
 48a:	0c 01       	movw	r0, r24
 48c:	ca 01       	movw	r24, r20
 48e:	a0 01       	movw	r20, r0
 490:	11 24       	eor	r1, r1
 492:	ff 27       	eor	r31, r31
 494:	59 1b       	sub	r21, r25
 496:	99 f0       	breq	.+38     	; 0x4be <__addsf3x+0x60>
 498:	59 3f       	cpi	r21, 0xF9	; 249
 49a:	50 f4       	brcc	.+20     	; 0x4b0 <__addsf3x+0x52>
 49c:	50 3e       	cpi	r21, 0xE0	; 224
 49e:	68 f1       	brcs	.+90     	; 0x4fa <__addsf3x+0x9c>
 4a0:	1a 16       	cp	r1, r26
 4a2:	f0 40       	sbci	r31, 0x00	; 0
 4a4:	a2 2f       	mov	r26, r18
 4a6:	23 2f       	mov	r18, r19
 4a8:	34 2f       	mov	r19, r20
 4aa:	44 27       	eor	r20, r20
 4ac:	58 5f       	subi	r21, 0xF8	; 248
 4ae:	f3 cf       	rjmp	.-26     	; 0x496 <__addsf3x+0x38>
 4b0:	46 95       	lsr	r20
 4b2:	37 95       	ror	r19
 4b4:	27 95       	ror	r18
 4b6:	a7 95       	ror	r26
 4b8:	f0 40       	sbci	r31, 0x00	; 0
 4ba:	53 95       	inc	r21
 4bc:	c9 f7       	brne	.-14     	; 0x4b0 <__addsf3x+0x52>
 4be:	7e f4       	brtc	.+30     	; 0x4de <__addsf3x+0x80>
 4c0:	1f 16       	cp	r1, r31
 4c2:	ba 0b       	sbc	r27, r26
 4c4:	62 0b       	sbc	r22, r18
 4c6:	73 0b       	sbc	r23, r19
 4c8:	84 0b       	sbc	r24, r20
 4ca:	ba f0       	brmi	.+46     	; 0x4fa <__addsf3x+0x9c>
 4cc:	91 50       	subi	r25, 0x01	; 1
 4ce:	a1 f0       	breq	.+40     	; 0x4f8 <__addsf3x+0x9a>
 4d0:	ff 0f       	add	r31, r31
 4d2:	bb 1f       	adc	r27, r27
 4d4:	66 1f       	adc	r22, r22
 4d6:	77 1f       	adc	r23, r23
 4d8:	88 1f       	adc	r24, r24
 4da:	c2 f7       	brpl	.-16     	; 0x4cc <__addsf3x+0x6e>
 4dc:	0e c0       	rjmp	.+28     	; 0x4fa <__addsf3x+0x9c>
 4de:	ba 0f       	add	r27, r26
 4e0:	62 1f       	adc	r22, r18
 4e2:	73 1f       	adc	r23, r19
 4e4:	84 1f       	adc	r24, r20
 4e6:	48 f4       	brcc	.+18     	; 0x4fa <__addsf3x+0x9c>
 4e8:	87 95       	ror	r24
 4ea:	77 95       	ror	r23
 4ec:	67 95       	ror	r22
 4ee:	b7 95       	ror	r27
 4f0:	f7 95       	ror	r31
 4f2:	9e 3f       	cpi	r25, 0xFE	; 254
 4f4:	08 f0       	brcs	.+2      	; 0x4f8 <__addsf3x+0x9a>
 4f6:	b0 cf       	rjmp	.-160    	; 0x458 <__addsf3+0x28>
 4f8:	93 95       	inc	r25
 4fa:	88 0f       	add	r24, r24
 4fc:	08 f0       	brcs	.+2      	; 0x500 <__addsf3x+0xa2>
 4fe:	99 27       	eor	r25, r25
 500:	ee 0f       	add	r30, r30
 502:	97 95       	ror	r25
 504:	87 95       	ror	r24
 506:	08 95       	ret

00000508 <__cmpsf2>:
 508:	0e 94 6e 03 	call	0x6dc	; 0x6dc <__fp_cmp>
 50c:	08 f4       	brcc	.+2      	; 0x510 <__cmpsf2+0x8>
 50e:	81 e0       	ldi	r24, 0x01	; 1
 510:	08 95       	ret

00000512 <__divsf3>:
 512:	0e 94 9d 02 	call	0x53a	; 0x53a <__divsf3x>
 516:	0c 94 a9 03 	jmp	0x752	; 0x752 <__fp_round>
 51a:	0e 94 a2 03 	call	0x744	; 0x744 <__fp_pscB>
 51e:	58 f0       	brcs	.+22     	; 0x536 <__divsf3+0x24>
 520:	0e 94 9b 03 	call	0x736	; 0x736 <__fp_pscA>
 524:	40 f0       	brcs	.+16     	; 0x536 <__divsf3+0x24>
 526:	29 f4       	brne	.+10     	; 0x532 <__divsf3+0x20>
 528:	5f 3f       	cpi	r21, 0xFF	; 255
 52a:	29 f0       	breq	.+10     	; 0x536 <__divsf3+0x24>
 52c:	0c 94 92 03 	jmp	0x724	; 0x724 <__fp_inf>
 530:	51 11       	cpse	r21, r1
 532:	0c 94 dd 03 	jmp	0x7ba	; 0x7ba <__fp_szero>
 536:	0c 94 98 03 	jmp	0x730	; 0x730 <__fp_nan>

0000053a <__divsf3x>:
 53a:	0e 94 ba 03 	call	0x774	; 0x774 <__fp_split3>
 53e:	68 f3       	brcs	.-38     	; 0x51a <__divsf3+0x8>

00000540 <__divsf3_pse>:
 540:	99 23       	and	r25, r25
 542:	b1 f3       	breq	.-20     	; 0x530 <__divsf3+0x1e>
 544:	55 23       	and	r21, r21
 546:	91 f3       	breq	.-28     	; 0x52c <__divsf3+0x1a>
 548:	95 1b       	sub	r25, r21
 54a:	55 0b       	sbc	r21, r21
 54c:	bb 27       	eor	r27, r27
 54e:	aa 27       	eor	r26, r26
 550:	62 17       	cp	r22, r18
 552:	73 07       	cpc	r23, r19
 554:	84 07       	cpc	r24, r20
 556:	38 f0       	brcs	.+14     	; 0x566 <__divsf3_pse+0x26>
 558:	9f 5f       	subi	r25, 0xFF	; 255
 55a:	5f 4f       	sbci	r21, 0xFF	; 255
 55c:	22 0f       	add	r18, r18
 55e:	33 1f       	adc	r19, r19
 560:	44 1f       	adc	r20, r20
 562:	aa 1f       	adc	r26, r26
 564:	a9 f3       	breq	.-22     	; 0x550 <__divsf3_pse+0x10>
 566:	35 d0       	rcall	.+106    	; 0x5d2 <__divsf3_pse+0x92>
 568:	0e 2e       	mov	r0, r30
 56a:	3a f0       	brmi	.+14     	; 0x57a <__divsf3_pse+0x3a>
 56c:	e0 e8       	ldi	r30, 0x80	; 128
 56e:	32 d0       	rcall	.+100    	; 0x5d4 <__divsf3_pse+0x94>
 570:	91 50       	subi	r25, 0x01	; 1
 572:	50 40       	sbci	r21, 0x00	; 0
 574:	e6 95       	lsr	r30
 576:	00 1c       	adc	r0, r0
 578:	ca f7       	brpl	.-14     	; 0x56c <__divsf3_pse+0x2c>
 57a:	2b d0       	rcall	.+86     	; 0x5d2 <__divsf3_pse+0x92>
 57c:	fe 2f       	mov	r31, r30
 57e:	29 d0       	rcall	.+82     	; 0x5d2 <__divsf3_pse+0x92>
 580:	66 0f       	add	r22, r22
 582:	77 1f       	adc	r23, r23
 584:	88 1f       	adc	r24, r24
 586:	bb 1f       	adc	r27, r27
 588:	26 17       	cp	r18, r22
 58a:	37 07       	cpc	r19, r23
 58c:	48 07       	cpc	r20, r24
 58e:	ab 07       	cpc	r26, r27
 590:	b0 e8       	ldi	r27, 0x80	; 128
 592:	09 f0       	breq	.+2      	; 0x596 <__divsf3_pse+0x56>
 594:	bb 0b       	sbc	r27, r27
 596:	80 2d       	mov	r24, r0
 598:	bf 01       	movw	r22, r30
 59a:	ff 27       	eor	r31, r31
 59c:	93 58       	subi	r25, 0x83	; 131
 59e:	5f 4f       	sbci	r21, 0xFF	; 255
 5a0:	3a f0       	brmi	.+14     	; 0x5b0 <__divsf3_pse+0x70>
 5a2:	9e 3f       	cpi	r25, 0xFE	; 254
 5a4:	51 05       	cpc	r21, r1
 5a6:	78 f0       	brcs	.+30     	; 0x5c6 <__divsf3_pse+0x86>
 5a8:	0c 94 92 03 	jmp	0x724	; 0x724 <__fp_inf>
 5ac:	0c 94 dd 03 	jmp	0x7ba	; 0x7ba <__fp_szero>
 5b0:	5f 3f       	cpi	r21, 0xFF	; 255
 5b2:	e4 f3       	brlt	.-8      	; 0x5ac <__divsf3_pse+0x6c>
 5b4:	98 3e       	cpi	r25, 0xE8	; 232
 5b6:	d4 f3       	brlt	.-12     	; 0x5ac <__divsf3_pse+0x6c>
 5b8:	86 95       	lsr	r24
 5ba:	77 95       	ror	r23
 5bc:	67 95       	ror	r22
 5be:	b7 95       	ror	r27
 5c0:	f7 95       	ror	r31
 5c2:	9f 5f       	subi	r25, 0xFF	; 255
 5c4:	c9 f7       	brne	.-14     	; 0x5b8 <__divsf3_pse+0x78>
 5c6:	88 0f       	add	r24, r24
 5c8:	91 1d       	adc	r25, r1
 5ca:	96 95       	lsr	r25
 5cc:	87 95       	ror	r24
 5ce:	97 f9       	bld	r25, 7
 5d0:	08 95       	ret
 5d2:	e1 e0       	ldi	r30, 0x01	; 1
 5d4:	66 0f       	add	r22, r22
 5d6:	77 1f       	adc	r23, r23
 5d8:	88 1f       	adc	r24, r24
 5da:	bb 1f       	adc	r27, r27
 5dc:	62 17       	cp	r22, r18
 5de:	73 07       	cpc	r23, r19
 5e0:	84 07       	cpc	r24, r20
 5e2:	ba 07       	cpc	r27, r26
 5e4:	20 f0       	brcs	.+8      	; 0x5ee <__divsf3_pse+0xae>
 5e6:	62 1b       	sub	r22, r18
 5e8:	73 0b       	sbc	r23, r19
 5ea:	84 0b       	sbc	r24, r20
 5ec:	ba 0b       	sbc	r27, r26
 5ee:	ee 1f       	adc	r30, r30
 5f0:	88 f7       	brcc	.-30     	; 0x5d4 <__divsf3_pse+0x94>
 5f2:	e0 95       	com	r30
 5f4:	08 95       	ret

000005f6 <__fixsfsi>:
 5f6:	0e 94 02 03 	call	0x604	; 0x604 <__fixunssfsi>
 5fa:	68 94       	set
 5fc:	b1 11       	cpse	r27, r1
 5fe:	0c 94 dd 03 	jmp	0x7ba	; 0x7ba <__fp_szero>
 602:	08 95       	ret

00000604 <__fixunssfsi>:
 604:	0e 94 c2 03 	call	0x784	; 0x784 <__fp_splitA>
 608:	88 f0       	brcs	.+34     	; 0x62c <__fixunssfsi+0x28>
 60a:	9f 57       	subi	r25, 0x7F	; 127
 60c:	98 f0       	brcs	.+38     	; 0x634 <__fixunssfsi+0x30>
 60e:	b9 2f       	mov	r27, r25
 610:	99 27       	eor	r25, r25
 612:	b7 51       	subi	r27, 0x17	; 23
 614:	b0 f0       	brcs	.+44     	; 0x642 <__fixunssfsi+0x3e>
 616:	e1 f0       	breq	.+56     	; 0x650 <__fixunssfsi+0x4c>
 618:	66 0f       	add	r22, r22
 61a:	77 1f       	adc	r23, r23
 61c:	88 1f       	adc	r24, r24
 61e:	99 1f       	adc	r25, r25
 620:	1a f0       	brmi	.+6      	; 0x628 <__fixunssfsi+0x24>
 622:	ba 95       	dec	r27
 624:	c9 f7       	brne	.-14     	; 0x618 <__fixunssfsi+0x14>
 626:	14 c0       	rjmp	.+40     	; 0x650 <__fixunssfsi+0x4c>
 628:	b1 30       	cpi	r27, 0x01	; 1
 62a:	91 f0       	breq	.+36     	; 0x650 <__fixunssfsi+0x4c>
 62c:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <__fp_zero>
 630:	b1 e0       	ldi	r27, 0x01	; 1
 632:	08 95       	ret
 634:	0c 94 dc 03 	jmp	0x7b8	; 0x7b8 <__fp_zero>
 638:	67 2f       	mov	r22, r23
 63a:	78 2f       	mov	r23, r24
 63c:	88 27       	eor	r24, r24
 63e:	b8 5f       	subi	r27, 0xF8	; 248
 640:	39 f0       	breq	.+14     	; 0x650 <__fixunssfsi+0x4c>
 642:	b9 3f       	cpi	r27, 0xF9	; 249
 644:	cc f3       	brlt	.-14     	; 0x638 <__fixunssfsi+0x34>
 646:	86 95       	lsr	r24
 648:	77 95       	ror	r23
 64a:	67 95       	ror	r22
 64c:	b3 95       	inc	r27
 64e:	d9 f7       	brne	.-10     	; 0x646 <__fixunssfsi+0x42>
 650:	3e f4       	brtc	.+14     	; 0x660 <__fixunssfsi+0x5c>
 652:	90 95       	com	r25
 654:	80 95       	com	r24
 656:	70 95       	com	r23
 658:	61 95       	neg	r22
 65a:	7f 4f       	sbci	r23, 0xFF	; 255
 65c:	8f 4f       	sbci	r24, 0xFF	; 255
 65e:	9f 4f       	sbci	r25, 0xFF	; 255
 660:	08 95       	ret

00000662 <__floatunsisf>:
 662:	e8 94       	clt
 664:	09 c0       	rjmp	.+18     	; 0x678 <__floatsisf+0x12>

00000666 <__floatsisf>:
 666:	97 fb       	bst	r25, 7
 668:	3e f4       	brtc	.+14     	; 0x678 <__floatsisf+0x12>
 66a:	90 95       	com	r25
 66c:	80 95       	com	r24
 66e:	70 95       	com	r23
 670:	61 95       	neg	r22
 672:	7f 4f       	sbci	r23, 0xFF	; 255
 674:	8f 4f       	sbci	r24, 0xFF	; 255
 676:	9f 4f       	sbci	r25, 0xFF	; 255
 678:	99 23       	and	r25, r25
 67a:	a9 f0       	breq	.+42     	; 0x6a6 <__floatsisf+0x40>
 67c:	f9 2f       	mov	r31, r25
 67e:	96 e9       	ldi	r25, 0x96	; 150
 680:	bb 27       	eor	r27, r27
 682:	93 95       	inc	r25
 684:	f6 95       	lsr	r31
 686:	87 95       	ror	r24
 688:	77 95       	ror	r23
 68a:	67 95       	ror	r22
 68c:	b7 95       	ror	r27
 68e:	f1 11       	cpse	r31, r1
 690:	f8 cf       	rjmp	.-16     	; 0x682 <__floatsisf+0x1c>
 692:	fa f4       	brpl	.+62     	; 0x6d2 <__floatsisf+0x6c>
 694:	bb 0f       	add	r27, r27
 696:	11 f4       	brne	.+4      	; 0x69c <__floatsisf+0x36>
 698:	60 ff       	sbrs	r22, 0
 69a:	1b c0       	rjmp	.+54     	; 0x6d2 <__floatsisf+0x6c>
 69c:	6f 5f       	subi	r22, 0xFF	; 255
 69e:	7f 4f       	sbci	r23, 0xFF	; 255
 6a0:	8f 4f       	sbci	r24, 0xFF	; 255
 6a2:	9f 4f       	sbci	r25, 0xFF	; 255
 6a4:	16 c0       	rjmp	.+44     	; 0x6d2 <__floatsisf+0x6c>
 6a6:	88 23       	and	r24, r24
 6a8:	11 f0       	breq	.+4      	; 0x6ae <__floatsisf+0x48>
 6aa:	96 e9       	ldi	r25, 0x96	; 150
 6ac:	11 c0       	rjmp	.+34     	; 0x6d0 <__floatsisf+0x6a>
 6ae:	77 23       	and	r23, r23
 6b0:	21 f0       	breq	.+8      	; 0x6ba <__floatsisf+0x54>
 6b2:	9e e8       	ldi	r25, 0x8E	; 142
 6b4:	87 2f       	mov	r24, r23
 6b6:	76 2f       	mov	r23, r22
 6b8:	05 c0       	rjmp	.+10     	; 0x6c4 <__floatsisf+0x5e>
 6ba:	66 23       	and	r22, r22
 6bc:	71 f0       	breq	.+28     	; 0x6da <__floatsisf+0x74>
 6be:	96 e8       	ldi	r25, 0x86	; 134
 6c0:	86 2f       	mov	r24, r22
 6c2:	70 e0       	ldi	r23, 0x00	; 0
 6c4:	60 e0       	ldi	r22, 0x00	; 0
 6c6:	2a f0       	brmi	.+10     	; 0x6d2 <__floatsisf+0x6c>
 6c8:	9a 95       	dec	r25
 6ca:	66 0f       	add	r22, r22
 6cc:	77 1f       	adc	r23, r23
 6ce:	88 1f       	adc	r24, r24
 6d0:	da f7       	brpl	.-10     	; 0x6c8 <__floatsisf+0x62>
 6d2:	88 0f       	add	r24, r24
 6d4:	96 95       	lsr	r25
 6d6:	87 95       	ror	r24
 6d8:	97 f9       	bld	r25, 7
 6da:	08 95       	ret

000006dc <__fp_cmp>:
 6dc:	99 0f       	add	r25, r25
 6de:	00 08       	sbc	r0, r0
 6e0:	55 0f       	add	r21, r21
 6e2:	aa 0b       	sbc	r26, r26
 6e4:	e0 e8       	ldi	r30, 0x80	; 128
 6e6:	fe ef       	ldi	r31, 0xFE	; 254
 6e8:	16 16       	cp	r1, r22
 6ea:	17 06       	cpc	r1, r23
 6ec:	e8 07       	cpc	r30, r24
 6ee:	f9 07       	cpc	r31, r25
 6f0:	c0 f0       	brcs	.+48     	; 0x722 <__fp_cmp+0x46>
 6f2:	12 16       	cp	r1, r18
 6f4:	13 06       	cpc	r1, r19
 6f6:	e4 07       	cpc	r30, r20
 6f8:	f5 07       	cpc	r31, r21
 6fa:	98 f0       	brcs	.+38     	; 0x722 <__fp_cmp+0x46>
 6fc:	62 1b       	sub	r22, r18
 6fe:	73 0b       	sbc	r23, r19
 700:	84 0b       	sbc	r24, r20
 702:	95 0b       	sbc	r25, r21
 704:	39 f4       	brne	.+14     	; 0x714 <__fp_cmp+0x38>
 706:	0a 26       	eor	r0, r26
 708:	61 f0       	breq	.+24     	; 0x722 <__fp_cmp+0x46>
 70a:	23 2b       	or	r18, r19
 70c:	24 2b       	or	r18, r20
 70e:	25 2b       	or	r18, r21
 710:	21 f4       	brne	.+8      	; 0x71a <__fp_cmp+0x3e>
 712:	08 95       	ret
 714:	0a 26       	eor	r0, r26
 716:	09 f4       	brne	.+2      	; 0x71a <__fp_cmp+0x3e>
 718:	a1 40       	sbci	r26, 0x01	; 1
 71a:	a6 95       	lsr	r26
 71c:	8f ef       	ldi	r24, 0xFF	; 255
 71e:	81 1d       	adc	r24, r1
 720:	81 1d       	adc	r24, r1
 722:	08 95       	ret

00000724 <__fp_inf>:
 724:	97 f9       	bld	r25, 7
 726:	9f 67       	ori	r25, 0x7F	; 127
 728:	80 e8       	ldi	r24, 0x80	; 128
 72a:	70 e0       	ldi	r23, 0x00	; 0
 72c:	60 e0       	ldi	r22, 0x00	; 0
 72e:	08 95       	ret

00000730 <__fp_nan>:
 730:	9f ef       	ldi	r25, 0xFF	; 255
 732:	80 ec       	ldi	r24, 0xC0	; 192
 734:	08 95       	ret

00000736 <__fp_pscA>:
 736:	00 24       	eor	r0, r0
 738:	0a 94       	dec	r0
 73a:	16 16       	cp	r1, r22
 73c:	17 06       	cpc	r1, r23
 73e:	18 06       	cpc	r1, r24
 740:	09 06       	cpc	r0, r25
 742:	08 95       	ret

00000744 <__fp_pscB>:
 744:	00 24       	eor	r0, r0
 746:	0a 94       	dec	r0
 748:	12 16       	cp	r1, r18
 74a:	13 06       	cpc	r1, r19
 74c:	14 06       	cpc	r1, r20
 74e:	05 06       	cpc	r0, r21
 750:	08 95       	ret

00000752 <__fp_round>:
 752:	09 2e       	mov	r0, r25
 754:	03 94       	inc	r0
 756:	00 0c       	add	r0, r0
 758:	11 f4       	brne	.+4      	; 0x75e <__fp_round+0xc>
 75a:	88 23       	and	r24, r24
 75c:	52 f0       	brmi	.+20     	; 0x772 <__fp_round+0x20>
 75e:	bb 0f       	add	r27, r27
 760:	40 f4       	brcc	.+16     	; 0x772 <__fp_round+0x20>
 762:	bf 2b       	or	r27, r31
 764:	11 f4       	brne	.+4      	; 0x76a <__fp_round+0x18>
 766:	60 ff       	sbrs	r22, 0
 768:	04 c0       	rjmp	.+8      	; 0x772 <__fp_round+0x20>
 76a:	6f 5f       	subi	r22, 0xFF	; 255
 76c:	7f 4f       	sbci	r23, 0xFF	; 255
 76e:	8f 4f       	sbci	r24, 0xFF	; 255
 770:	9f 4f       	sbci	r25, 0xFF	; 255
 772:	08 95       	ret

00000774 <__fp_split3>:
 774:	57 fd       	sbrc	r21, 7
 776:	90 58       	subi	r25, 0x80	; 128
 778:	44 0f       	add	r20, r20
 77a:	55 1f       	adc	r21, r21
 77c:	59 f0       	breq	.+22     	; 0x794 <__fp_splitA+0x10>
 77e:	5f 3f       	cpi	r21, 0xFF	; 255
 780:	71 f0       	breq	.+28     	; 0x79e <__fp_splitA+0x1a>
 782:	47 95       	ror	r20

00000784 <__fp_splitA>:
 784:	88 0f       	add	r24, r24
 786:	97 fb       	bst	r25, 7
 788:	99 1f       	adc	r25, r25
 78a:	61 f0       	breq	.+24     	; 0x7a4 <__fp_splitA+0x20>
 78c:	9f 3f       	cpi	r25, 0xFF	; 255
 78e:	79 f0       	breq	.+30     	; 0x7ae <__fp_splitA+0x2a>
 790:	87 95       	ror	r24
 792:	08 95       	ret
 794:	12 16       	cp	r1, r18
 796:	13 06       	cpc	r1, r19
 798:	14 06       	cpc	r1, r20
 79a:	55 1f       	adc	r21, r21
 79c:	f2 cf       	rjmp	.-28     	; 0x782 <__fp_split3+0xe>
 79e:	46 95       	lsr	r20
 7a0:	f1 df       	rcall	.-30     	; 0x784 <__fp_splitA>
 7a2:	08 c0       	rjmp	.+16     	; 0x7b4 <__fp_splitA+0x30>
 7a4:	16 16       	cp	r1, r22
 7a6:	17 06       	cpc	r1, r23
 7a8:	18 06       	cpc	r1, r24
 7aa:	99 1f       	adc	r25, r25
 7ac:	f1 cf       	rjmp	.-30     	; 0x790 <__fp_splitA+0xc>
 7ae:	86 95       	lsr	r24
 7b0:	71 05       	cpc	r23, r1
 7b2:	61 05       	cpc	r22, r1
 7b4:	08 94       	sec
 7b6:	08 95       	ret

000007b8 <__fp_zero>:
 7b8:	e8 94       	clt

000007ba <__fp_szero>:
 7ba:	bb 27       	eor	r27, r27
 7bc:	66 27       	eor	r22, r22
 7be:	77 27       	eor	r23, r23
 7c0:	cb 01       	movw	r24, r22
 7c2:	97 f9       	bld	r25, 7
 7c4:	08 95       	ret

000007c6 <__mulsf3>:
 7c6:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__mulsf3x>
 7ca:	0c 94 a9 03 	jmp	0x752	; 0x752 <__fp_round>
 7ce:	0e 94 9b 03 	call	0x736	; 0x736 <__fp_pscA>
 7d2:	38 f0       	brcs	.+14     	; 0x7e2 <__mulsf3+0x1c>
 7d4:	0e 94 a2 03 	call	0x744	; 0x744 <__fp_pscB>
 7d8:	20 f0       	brcs	.+8      	; 0x7e2 <__mulsf3+0x1c>
 7da:	95 23       	and	r25, r21
 7dc:	11 f0       	breq	.+4      	; 0x7e2 <__mulsf3+0x1c>
 7de:	0c 94 92 03 	jmp	0x724	; 0x724 <__fp_inf>
 7e2:	0c 94 98 03 	jmp	0x730	; 0x730 <__fp_nan>
 7e6:	11 24       	eor	r1, r1
 7e8:	0c 94 dd 03 	jmp	0x7ba	; 0x7ba <__fp_szero>

000007ec <__mulsf3x>:
 7ec:	0e 94 ba 03 	call	0x774	; 0x774 <__fp_split3>
 7f0:	70 f3       	brcs	.-36     	; 0x7ce <__mulsf3+0x8>

000007f2 <__mulsf3_pse>:
 7f2:	95 9f       	mul	r25, r21
 7f4:	c1 f3       	breq	.-16     	; 0x7e6 <__mulsf3+0x20>
 7f6:	95 0f       	add	r25, r21
 7f8:	50 e0       	ldi	r21, 0x00	; 0
 7fa:	55 1f       	adc	r21, r21
 7fc:	62 9f       	mul	r22, r18
 7fe:	f0 01       	movw	r30, r0
 800:	72 9f       	mul	r23, r18
 802:	bb 27       	eor	r27, r27
 804:	f0 0d       	add	r31, r0
 806:	b1 1d       	adc	r27, r1
 808:	63 9f       	mul	r22, r19
 80a:	aa 27       	eor	r26, r26
 80c:	f0 0d       	add	r31, r0
 80e:	b1 1d       	adc	r27, r1
 810:	aa 1f       	adc	r26, r26
 812:	64 9f       	mul	r22, r20
 814:	66 27       	eor	r22, r22
 816:	b0 0d       	add	r27, r0
 818:	a1 1d       	adc	r26, r1
 81a:	66 1f       	adc	r22, r22
 81c:	82 9f       	mul	r24, r18
 81e:	22 27       	eor	r18, r18
 820:	b0 0d       	add	r27, r0
 822:	a1 1d       	adc	r26, r1
 824:	62 1f       	adc	r22, r18
 826:	73 9f       	mul	r23, r19
 828:	b0 0d       	add	r27, r0
 82a:	a1 1d       	adc	r26, r1
 82c:	62 1f       	adc	r22, r18
 82e:	83 9f       	mul	r24, r19
 830:	a0 0d       	add	r26, r0
 832:	61 1d       	adc	r22, r1
 834:	22 1f       	adc	r18, r18
 836:	74 9f       	mul	r23, r20
 838:	33 27       	eor	r19, r19
 83a:	a0 0d       	add	r26, r0
 83c:	61 1d       	adc	r22, r1
 83e:	23 1f       	adc	r18, r19
 840:	84 9f       	mul	r24, r20
 842:	60 0d       	add	r22, r0
 844:	21 1d       	adc	r18, r1
 846:	82 2f       	mov	r24, r18
 848:	76 2f       	mov	r23, r22
 84a:	6a 2f       	mov	r22, r26
 84c:	11 24       	eor	r1, r1
 84e:	9f 57       	subi	r25, 0x7F	; 127
 850:	50 40       	sbci	r21, 0x00	; 0
 852:	9a f0       	brmi	.+38     	; 0x87a <__mulsf3_pse+0x88>
 854:	f1 f0       	breq	.+60     	; 0x892 <__mulsf3_pse+0xa0>
 856:	88 23       	and	r24, r24
 858:	4a f0       	brmi	.+18     	; 0x86c <__mulsf3_pse+0x7a>
 85a:	ee 0f       	add	r30, r30
 85c:	ff 1f       	adc	r31, r31
 85e:	bb 1f       	adc	r27, r27
 860:	66 1f       	adc	r22, r22
 862:	77 1f       	adc	r23, r23
 864:	88 1f       	adc	r24, r24
 866:	91 50       	subi	r25, 0x01	; 1
 868:	50 40       	sbci	r21, 0x00	; 0
 86a:	a9 f7       	brne	.-22     	; 0x856 <__mulsf3_pse+0x64>
 86c:	9e 3f       	cpi	r25, 0xFE	; 254
 86e:	51 05       	cpc	r21, r1
 870:	80 f0       	brcs	.+32     	; 0x892 <__mulsf3_pse+0xa0>
 872:	0c 94 92 03 	jmp	0x724	; 0x724 <__fp_inf>
 876:	0c 94 dd 03 	jmp	0x7ba	; 0x7ba <__fp_szero>
 87a:	5f 3f       	cpi	r21, 0xFF	; 255
 87c:	e4 f3       	brlt	.-8      	; 0x876 <__mulsf3_pse+0x84>
 87e:	98 3e       	cpi	r25, 0xE8	; 232
 880:	d4 f3       	brlt	.-12     	; 0x876 <__mulsf3_pse+0x84>
 882:	86 95       	lsr	r24
 884:	77 95       	ror	r23
 886:	67 95       	ror	r22
 888:	b7 95       	ror	r27
 88a:	f7 95       	ror	r31
 88c:	e7 95       	ror	r30
 88e:	9f 5f       	subi	r25, 0xFF	; 255
 890:	c1 f7       	brne	.-16     	; 0x882 <__mulsf3_pse+0x90>
 892:	fe 2b       	or	r31, r30
 894:	88 0f       	add	r24, r24
 896:	91 1d       	adc	r25, r1
 898:	96 95       	lsr	r25
 89a:	87 95       	ror	r24
 89c:	97 f9       	bld	r25, 7
 89e:	08 95       	ret

000008a0 <_exit>:
 8a0:	f8 94       	cli

000008a2 <__stop_program>:
 8a2:	ff cf       	rjmp	.-2      	; 0x8a2 <__stop_program>
