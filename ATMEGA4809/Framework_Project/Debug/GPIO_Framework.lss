
GPIO_Framework.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00802800  00802800  00000f95  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ed0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000031  00004ed0  00000ed0  00000f64  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000001  00802800  00802800  00000f95  2**0
                  ALLOC
  4 .comment      00000030  00000000  00000000  00000f95  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000fc8  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000003f0  00000000  00000000  00001008  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00006d3f  00000000  00000000  000013f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000034f9  00000000  00000000  00008137  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001f8b  00000000  00000000  0000b630  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000006f0  00000000  00000000  0000d5bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002778  00000000  00000000  0000dcac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001752  00000000  00000000  00010424  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000002f0  00000000  00000000  00011b76  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__ctors_end>
   4:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
   8:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
   c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  10:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  14:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  18:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  1c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  20:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  24:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  28:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  2c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  30:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  34:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  38:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  3c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  40:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  44:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  48:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  4c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  50:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  54:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  58:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  5c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  60:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  64:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  68:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  6c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  70:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  74:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  78:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  7c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  80:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  84:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  88:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  8c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  90:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  94:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  98:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  9c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>

000000a0 <__ctors_end>:
  a0:	11 24       	eor	r1, r1
  a2:	1f be       	out	0x3f, r1	; 63
  a4:	cf ef       	ldi	r28, 0xFF	; 255
  a6:	cd bf       	out	0x3d, r28	; 61
  a8:	df e3       	ldi	r29, 0x3F	; 63
  aa:	de bf       	out	0x3e, r29	; 62

000000ac <__do_clear_bss>:
  ac:	28 e2       	ldi	r18, 0x28	; 40
  ae:	a0 e0       	ldi	r26, 0x00	; 0
  b0:	b8 e2       	ldi	r27, 0x28	; 40
  b2:	01 c0       	rjmp	.+2      	; 0xb6 <.do_clear_bss_start>

000000b4 <.do_clear_bss_loop>:
  b4:	1d 92       	st	X+, r1

000000b6 <.do_clear_bss_start>:
  b6:	a1 30       	cpi	r26, 0x01	; 1
  b8:	b2 07       	cpc	r27, r18
  ba:	e1 f7       	brne	.-8      	; 0xb4 <.do_clear_bss_loop>
  bc:	0e 94 44 04 	call	0x888	; 0x888 <main>
  c0:	0c 94 66 07 	jmp	0xecc	; 0xecc <_exit>

000000c4 <__bad_interrupt>:
  c4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c8 <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
  c8:	0e 94 04 05 	call	0xa08	; 0xa08 <system_init>
  cc:	08 95       	ret

000000ce <Adc_Init>:
 * @brief Disables ADC
 * @param id ADC ID
 */
void Adc_DisableAdc(Adc_adcId_t id)
{
    AdcWrapper_DisableAdc(id);
  ce:	cf 93       	push	r28
  d0:	df 93       	push	r29
  d2:	00 97       	sbiw	r24, 0x00	; 0
  d4:	e9 f0       	breq	.+58     	; 0x110 <__EEPROM_REGION_LENGTH__+0x10>
  d6:	ec 01       	movw	r28, r24
  d8:	61 e0       	ldi	r22, 0x01	; 1
  da:	88 81       	ld	r24, Y
  dc:	0e 94 db 00 	call	0x1b6	; 0x1b6 <AdcWrapper_EnableAdcClock>
  e0:	69 81       	ldd	r22, Y+1	; 0x01
  e2:	88 81       	ld	r24, Y
  e4:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <AdcWrapper_SetSamples>
  e8:	6a 81       	ldd	r22, Y+2	; 0x02
  ea:	88 81       	ld	r24, Y
  ec:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <AdcWrapper_SetClockSource>
  f0:	6b 81       	ldd	r22, Y+3	; 0x03
  f2:	88 81       	ld	r24, Y
  f4:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <AdcWrapper_SetJustification>
  f8:	6c 81       	ldd	r22, Y+4	; 0x04
  fa:	88 81       	ld	r24, Y
  fc:	0e 94 ed 00 	call	0x1da	; 0x1da <AdcWrapper_SetPrescaler>
 100:	6c 81       	ldd	r22, Y+4	; 0x04
 102:	88 81       	ld	r24, Y
 104:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <AdcWrapper_SetResolution>
 108:	6e 81       	ldd	r22, Y+6	; 0x06
 10a:	88 81       	ld	r24, Y
 10c:	0e 94 05 01 	call	0x20a	; 0x20a <AdcWrapper_SetVoltageReference>
 110:	df 91       	pop	r29
 112:	cf 91       	pop	r28
 114:	08 95       	ret

00000116 <Adc_SetChannel>:
 116:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <AdcWrapper_SetChannel>
 11a:	08 95       	ret

0000011c <Adc_CalibrateAdc>:
 11c:	0e 94 11 01 	call	0x222	; 0x222 <AdcWrapper_CalibrateAdc>
 120:	08 95       	ret

00000122 <Adc_EnableAdc>:
 122:	0e 94 16 01 	call	0x22c	; 0x22c <AdcWrapper_EnableAdc>
 126:	08 95       	ret

00000128 <Adc_GetResult>:
 * @param id ADC ID
 * @return Result of ADC´s conversion
 */
uint16_t Adc_GetResult(Adc_adcId_t id)
{
    return AdcWrapper_GetResult(id);
 128:	0e 94 1b 01 	call	0x236	; 0x236 <AdcWrapper_GetResult>
}
 12c:	08 95       	ret

0000012e <Adc_GetConversionStatus>:
 * @param id ADC ID
 * @return Status of ADC´s conversion
 */
Adc_status_t Adc_GetConversionStatus(Adc_adcId_t id)
{
    return AdcWrapper_GetConversionStatus(id);
 12e:	0e 94 23 01 	call	0x246	; 0x246 <AdcWrapper_GetConversionStatus>
}
 132:	08 95       	ret

00000134 <Adc_StartConversion>:
 * @brief Starts ADC conversion in the previously selected channel
 * @param id ADC ID
 */
void Adc_StartConversion(Adc_adcId_t id)
{
    AdcWrapper_StartConversion(id);
 134:	0e 94 2a 01 	call	0x254	; 0x254 <AdcWrapper_StartConversion>
 138:	08 95       	ret

0000013a <Gpio_InitDefaults>:
 * @param port Port to be written
 * @param value Value to be written to port
 */
void Gpio_WritePort(Gpio_portId_t port, Gpio_data_t value)
{
    GpioWrapper_WritePort(port, value);
 13a:	ef 92       	push	r14
 13c:	ff 92       	push	r15
 13e:	0f 93       	push	r16
 140:	1f 93       	push	r17
 142:	cf 93       	push	r28
 144:	df 93       	push	r29
 146:	00 97       	sbiw	r24, 0x00	; 0
 148:	61 f1       	breq	.+88     	; 0x1a2 <Gpio_InitDefaults+0x68>
 14a:	ec 01       	movw	r28, r24
 14c:	8c 01       	movw	r16, r24
 14e:	08 5e       	subi	r16, 0xE8	; 232
 150:	1f 4f       	sbci	r17, 0xFF	; 255
 152:	4a 81       	ldd	r20, Y+2	; 0x02
 154:	43 30       	cpi	r20, 0x03	; 3
 156:	e1 f0       	breq	.+56     	; 0x190 <Gpio_InitDefaults+0x56>
 158:	69 81       	ldd	r22, Y+1	; 0x01
 15a:	88 81       	ld	r24, Y
 15c:	0e 94 59 01 	call	0x2b2	; 0x2b2 <GpioWrapper_setMode>
 160:	4d 81       	ldd	r20, Y+5	; 0x05
 162:	69 81       	ldd	r22, Y+1	; 0x01
 164:	88 81       	ld	r24, Y
 166:	0e 94 57 02 	call	0x4ae	; 0x4ae <GpioWrapper_setPull>
 16a:	4e 81       	ldd	r20, Y+6	; 0x06
 16c:	69 81       	ldd	r22, Y+1	; 0x01
 16e:	88 81       	ld	r24, Y
 170:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <GpioWrapper_setSpeed>
 174:	8a 81       	ldd	r24, Y+2	; 0x02
 176:	81 30       	cpi	r24, 0x01	; 1
 178:	81 f4       	brne	.+32     	; 0x19a <Gpio_InitDefaults+0x60>
 17a:	4c 81       	ldd	r20, Y+4	; 0x04
 17c:	69 81       	ldd	r22, Y+1	; 0x01
 17e:	88 81       	ld	r24, Y
 180:	0e 94 e5 02 	call	0x5ca	; 0x5ca <GpioWrapper_setOutputType>
 184:	4f 81       	ldd	r20, Y+7	; 0x07
 186:	69 81       	ldd	r22, Y+1	; 0x01
 188:	88 81       	ld	r24, Y
 18a:	0e 94 04 03 	call	0x608	; 0x608 <GpioWrapper_SetPin>
 18e:	05 c0       	rjmp	.+10     	; 0x19a <Gpio_InitDefaults+0x60>
 190:	4b 81       	ldd	r20, Y+3	; 0x03
 192:	69 81       	ldd	r22, Y+1	; 0x01
 194:	88 81       	ld	r24, Y
 196:	0e 94 e6 02 	call	0x5cc	; 0x5cc <GpioWrapper_setAlternate>
 19a:	28 96       	adiw	r28, 0x08	; 8
 19c:	c0 17       	cp	r28, r16
 19e:	d1 07       	cpc	r29, r17
 1a0:	c1 f6       	brne	.-80     	; 0x152 <Gpio_InitDefaults+0x18>
 1a2:	df 91       	pop	r29
 1a4:	cf 91       	pop	r28
 1a6:	1f 91       	pop	r17
 1a8:	0f 91       	pop	r16
 1aa:	ff 90       	pop	r15
 1ac:	ef 90       	pop	r14
 1ae:	08 95       	ret

000001b0 <Gpio_SetPin>:
 * @param pin Pin to be written
 * @param state Value to be written to pin
 */
void Gpio_SetPin(Gpio_portId_t port, Gpio_pinId_t pin, Gpio_pinState_t state)
{
    GpioWrapper_SetPin(port, pin, state);
 1b0:	0e 94 04 03 	call	0x608	; 0x608 <GpioWrapper_SetPin>
 1b4:	08 95       	ret

000001b6 <AdcWrapper_EnableAdcClock>:
 */
void AdcWrapper_DisableAdc(Adc_adcId_t id)
{
    if(id == ADC_1)
	{
		ADC_0_disable();
 1b6:	08 95       	ret

000001b8 <AdcWrapper_SetSamples>:
 1b8:	65 35       	cpi	r22, 0x55	; 85
 1ba:	49 f0       	breq	.+18     	; 0x1ce <AdcWrapper_SetSamples+0x16>
 1bc:	81 11       	cpse	r24, r1
 1be:	07 c0       	rjmp	.+14     	; 0x1ce <AdcWrapper_SetSamples+0x16>
 1c0:	e0 e0       	ldi	r30, 0x00	; 0
 1c2:	f6 e0       	ldi	r31, 0x06	; 6
 1c4:	81 81       	ldd	r24, Z+1	; 0x01
 1c6:	64 70       	andi	r22, 0x04	; 4
 1c8:	88 7f       	andi	r24, 0xF8	; 248
 1ca:	68 2b       	or	r22, r24
 1cc:	61 83       	std	Z+1, r22	; 0x01
 1ce:	08 95       	ret

000001d0 <AdcWrapper_SetClockSource>:
 1d0:	08 95       	ret

000001d2 <AdcWrapper_SetChannel>:
 1d2:	60 93 00 28 	sts	0x2800, r22	; 0x802800 <__DATA_REGION_ORIGIN__>
 1d6:	08 95       	ret

000001d8 <AdcWrapper_SetJustification>:
 1d8:	08 95       	ret

000001da <AdcWrapper_SetPrescaler>:
 1da:	65 35       	cpi	r22, 0x55	; 85
 1dc:	49 f0       	breq	.+18     	; 0x1f0 <AdcWrapper_SetPrescaler+0x16>
 1de:	81 11       	cpse	r24, r1
 1e0:	07 c0       	rjmp	.+14     	; 0x1f0 <AdcWrapper_SetPrescaler+0x16>
 1e2:	e0 e0       	ldi	r30, 0x00	; 0
 1e4:	f6 e0       	ldi	r31, 0x06	; 6
 1e6:	82 81       	ldd	r24, Z+2	; 0x02
 1e8:	67 70       	andi	r22, 0x07	; 7
 1ea:	88 7f       	andi	r24, 0xF8	; 248
 1ec:	68 2b       	or	r22, r24
 1ee:	62 83       	std	Z+2, r22	; 0x02
 1f0:	08 95       	ret

000001f2 <AdcWrapper_SetResolution>:
 1f2:	65 35       	cpi	r22, 0x55	; 85
 1f4:	49 f0       	breq	.+18     	; 0x208 <AdcWrapper_SetResolution+0x16>
 1f6:	81 11       	cpse	r24, r1
 1f8:	07 c0       	rjmp	.+14     	; 0x208 <AdcWrapper_SetResolution+0x16>
 1fa:	e0 e0       	ldi	r30, 0x00	; 0
 1fc:	f6 e0       	ldi	r31, 0x06	; 6
 1fe:	80 81       	ld	r24, Z
 200:	64 70       	andi	r22, 0x04	; 4
 202:	8b 7f       	andi	r24, 0xFB	; 251
 204:	68 2b       	or	r22, r24
 206:	60 83       	st	Z, r22
 208:	08 95       	ret

0000020a <AdcWrapper_SetVoltageReference>:
 20a:	65 35       	cpi	r22, 0x55	; 85
 20c:	49 f0       	breq	.+18     	; 0x220 <AdcWrapper_SetVoltageReference+0x16>
 20e:	81 11       	cpse	r24, r1
 210:	07 c0       	rjmp	.+14     	; 0x220 <AdcWrapper_SetVoltageReference+0x16>
 212:	e0 e0       	ldi	r30, 0x00	; 0
 214:	f6 e0       	ldi	r31, 0x06	; 6
 216:	82 81       	ldd	r24, Z+2	; 0x02
 218:	60 73       	andi	r22, 0x30	; 48
 21a:	8f 7c       	andi	r24, 0xCF	; 207
 21c:	68 2b       	or	r22, r24
 21e:	62 83       	std	Z+2, r22	; 0x02
 220:	08 95       	ret

00000222 <AdcWrapper_CalibrateAdc>:
 222:	81 11       	cpse	r24, r1
 224:	02 c0       	rjmp	.+4      	; 0x22a <AdcWrapper_CalibrateAdc+0x8>
 226:	10 92 16 06 	sts	0x0616, r1	; 0x800616 <__TEXT_REGION_LENGTH__+0x7f4616>
 22a:	08 95       	ret

0000022c <AdcWrapper_EnableAdc>:
 22c:	81 11       	cpse	r24, r1
 22e:	02 c0       	rjmp	.+4      	; 0x234 <AdcWrapper_EnableAdc+0x8>
 230:	0e 94 a7 04 	call	0x94e	; 0x94e <ADC_0_enable>
 234:	08 95       	ret

00000236 <AdcWrapper_GetResult>:
 * @param id ADC ID
 * @return Result of ADC´s conversion
 */
uint16_t AdcWrapper_GetResult(Adc_adcId_t id)
{
	if(id == ADC_1)
 236:	81 11       	cpse	r24, r1
 238:	03 c0       	rjmp	.+6      	; 0x240 <AdcWrapper_GetResult+0xa>
	{
		return ADC_0_get_conversion_result();
 23a:	0e 94 b7 04 	call	0x96e	; 0x96e <ADC_0_get_conversion_result>
 23e:	08 95       	ret
	}
	else 
	{
		return 0;
 240:	80 e0       	ldi	r24, 0x00	; 0
 242:	90 e0       	ldi	r25, 0x00	; 0
	}
}
 244:	08 95       	ret

00000246 <AdcWrapper_GetConversionStatus>:
 * @param id ADC ID
 * @return Status of ADC´s conversion
 */
Adc_status_t AdcWrapper_GetConversionStatus(Adc_adcId_t id)
{
	if(id == ADC_1)
 246:	81 11       	cpse	r24, r1
 248:	03 c0       	rjmp	.+6      	; 0x250 <AdcWrapper_GetConversionStatus+0xa>
	{
		return ADC_0_is_conversion_done();
 24a:	0e 94 b3 04 	call	0x966	; 0x966 <ADC_0_is_conversion_done>
 24e:	08 95       	ret
	}
	else
	{
		return 0;
 250:	80 e0       	ldi	r24, 0x00	; 0
	}
}
 252:	08 95       	ret

00000254 <AdcWrapper_StartConversion>:
 * @brief Starts ADC conversion in the previously selected channel
 * @param id ADC ID
 */
void AdcWrapper_StartConversion(Adc_adcId_t id)
{
	if(id == ADC_1)
 254:	81 11       	cpse	r24, r1
 256:	04 c0       	rjmp	.+8      	; 0x260 <AdcWrapper_StartConversion+0xc>
	{
		ADC_0_start_conversion((adc_0_channel_t) Adc_Channel);
 258:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
 25c:	0e 94 ad 04 	call	0x95a	; 0x95a <ADC_0_start_conversion>
 260:	08 95       	ret

00000262 <GpioWrapper_IsGPIOValid>:
 *
 * \param[in] value Value to write to the port register
 */
static inline void PORTF_write_port(const uint8_t value)
{
	VPORTF.OUT = value;
 262:	68 30       	cpi	r22, 0x08	; 8
 264:	00 f5       	brcc	.+64     	; 0x2a6 <GpioWrapper_IsGPIOValid+0x44>
 266:	86 30       	cpi	r24, 0x06	; 6
 268:	00 f5       	brcc	.+64     	; 0x2aa <GpioWrapper_IsGPIOValid+0x48>
 26a:	84 30       	cpi	r24, 0x04	; 4
 26c:	38 f4       	brcc	.+14     	; 0x27c <GpioWrapper_IsGPIOValid+0x1a>
 26e:	82 30       	cpi	r24, 0x02	; 2
 270:	f0 f4       	brcc	.+60     	; 0x2ae <GpioWrapper_IsGPIOValid+0x4c>
 272:	88 23       	and	r24, r24
 274:	e1 f0       	breq	.+56     	; 0x2ae <GpioWrapper_IsGPIOValid+0x4c>
 276:	81 30       	cpi	r24, 0x01	; 1
 278:	39 f0       	breq	.+14     	; 0x288 <GpioWrapper_IsGPIOValid+0x26>
 27a:	04 c0       	rjmp	.+8      	; 0x284 <GpioWrapper_IsGPIOValid+0x22>
 27c:	84 30       	cpi	r24, 0x04	; 4
 27e:	49 f0       	breq	.+18     	; 0x292 <GpioWrapper_IsGPIOValid+0x30>
 280:	85 30       	cpi	r24, 0x05	; 5
 282:	61 f0       	breq	.+24     	; 0x29c <GpioWrapper_IsGPIOValid+0x3a>
 284:	80 e0       	ldi	r24, 0x00	; 0
 286:	08 95       	ret
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	66 30       	cpi	r22, 0x06	; 6
 28c:	88 f0       	brcs	.+34     	; 0x2b0 <GpioWrapper_IsGPIOValid+0x4e>
 28e:	80 e0       	ldi	r24, 0x00	; 0
 290:	08 95       	ret
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	65 30       	cpi	r22, 0x05	; 5
 296:	60 f0       	brcs	.+24     	; 0x2b0 <GpioWrapper_IsGPIOValid+0x4e>
 298:	80 e0       	ldi	r24, 0x00	; 0
 29a:	08 95       	ret
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	67 30       	cpi	r22, 0x07	; 7
 2a0:	38 f0       	brcs	.+14     	; 0x2b0 <GpioWrapper_IsGPIOValid+0x4e>
 2a2:	80 e0       	ldi	r24, 0x00	; 0
 2a4:	08 95       	ret
 2a6:	80 e0       	ldi	r24, 0x00	; 0
 2a8:	08 95       	ret
 2aa:	80 e0       	ldi	r24, 0x00	; 0
 2ac:	08 95       	ret
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	08 95       	ret

000002b2 <GpioWrapper_setMode>:
 2b2:	1f 93       	push	r17
 2b4:	cf 93       	push	r28
 2b6:	df 93       	push	r29
 2b8:	c8 2f       	mov	r28, r24
 2ba:	d6 2f       	mov	r29, r22
 2bc:	14 2f       	mov	r17, r20
 2be:	0e 94 31 01 	call	0x262	; 0x262 <GpioWrapper_IsGPIOValid>
 2c2:	88 23       	and	r24, r24
 2c4:	09 f4       	brne	.+2      	; 0x2c8 <GpioWrapper_setMode+0x16>
 2c6:	ef c0       	rjmp	.+478    	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 2c8:	c2 30       	cpi	r28, 0x02	; 2
 2ca:	09 f4       	brne	.+2      	; 0x2ce <GpioWrapper_setMode+0x1c>
 2cc:	59 c0       	rjmp	.+178    	; 0x380 <GpioWrapper_setMode+0xce>
 2ce:	28 f4       	brcc	.+10     	; 0x2da <GpioWrapper_setMode+0x28>
 2d0:	cc 23       	and	r28, r28
 2d2:	61 f0       	breq	.+24     	; 0x2ec <GpioWrapper_setMode+0x3a>
 2d4:	c1 30       	cpi	r28, 0x01	; 1
 2d6:	79 f1       	breq	.+94     	; 0x336 <GpioWrapper_setMode+0x84>
 2d8:	e6 c0       	rjmp	.+460    	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 2da:	c4 30       	cpi	r28, 0x04	; 4
 2dc:	09 f4       	brne	.+2      	; 0x2e0 <GpioWrapper_setMode+0x2e>
 2de:	9a c0       	rjmp	.+308    	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 2e0:	08 f4       	brcc	.+2      	; 0x2e4 <GpioWrapper_setMode+0x32>
 2e2:	73 c0       	rjmp	.+230    	; 0x3ca <GpioWrapper_setMode+0x118>
 2e4:	c5 30       	cpi	r28, 0x05	; 5
 2e6:	09 f4       	brne	.+2      	; 0x2ea <GpioWrapper_setMode+0x38>
 2e8:	ba c0       	rjmp	.+372    	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 2ea:	dd c0       	rjmp	.+442    	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 2ec:	11 30       	cpi	r17, 0x01	; 1
 2ee:	81 f0       	breq	.+32     	; 0x310 <GpioWrapper_setMode+0x5e>
 2f0:	18 f0       	brcs	.+6      	; 0x2f8 <GpioWrapper_setMode+0x46>
 2f2:	12 30       	cpi	r17, 0x02	; 2
 2f4:	c1 f0       	breq	.+48     	; 0x326 <GpioWrapper_setMode+0x74>
 2f6:	d7 c0       	rjmp	.+430    	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 2f8:	20 b1       	in	r18, 0x00	; 0
 2fa:	81 e0       	ldi	r24, 0x01	; 1
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	02 c0       	rjmp	.+4      	; 0x304 <GpioWrapper_setMode+0x52>
 300:	88 0f       	add	r24, r24
 302:	99 1f       	adc	r25, r25
 304:	da 95       	dec	r29
 306:	e2 f7       	brpl	.-8      	; 0x300 <GpioWrapper_setMode+0x4e>
 308:	80 95       	com	r24
 30a:	82 23       	and	r24, r18
 30c:	80 b9       	out	0x00, r24	; 0
 30e:	cb c0       	rjmp	.+406    	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 310:	20 b1       	in	r18, 0x00	; 0
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	02 c0       	rjmp	.+4      	; 0x31c <GpioWrapper_setMode+0x6a>
 318:	88 0f       	add	r24, r24
 31a:	99 1f       	adc	r25, r25
 31c:	da 95       	dec	r29
 31e:	e2 f7       	brpl	.-8      	; 0x318 <GpioWrapper_setMode+0x66>
 320:	82 2b       	or	r24, r18
 322:	80 b9       	out	0x00, r24	; 0
 324:	c0 c0       	rjmp	.+384    	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 326:	ed 2f       	mov	r30, r29
 328:	f0 e0       	ldi	r31, 0x00	; 0
 32a:	e0 5f       	subi	r30, 0xF0	; 240
 32c:	fb 4f       	sbci	r31, 0xFB	; 251
 32e:	80 81       	ld	r24, Z
 330:	88 60       	ori	r24, 0x08	; 8
 332:	80 83       	st	Z, r24
 334:	b8 c0       	rjmp	.+368    	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 336:	11 30       	cpi	r17, 0x01	; 1
 338:	81 f0       	breq	.+32     	; 0x35a <GpioWrapper_setMode+0xa8>
 33a:	18 f0       	brcs	.+6      	; 0x342 <GpioWrapper_setMode+0x90>
 33c:	12 30       	cpi	r17, 0x02	; 2
 33e:	c1 f0       	breq	.+48     	; 0x370 <GpioWrapper_setMode+0xbe>
 340:	b2 c0       	rjmp	.+356    	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 342:	24 b1       	in	r18, 0x04	; 4
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	02 c0       	rjmp	.+4      	; 0x34e <GpioWrapper_setMode+0x9c>
 34a:	88 0f       	add	r24, r24
 34c:	99 1f       	adc	r25, r25
 34e:	da 95       	dec	r29
 350:	e2 f7       	brpl	.-8      	; 0x34a <GpioWrapper_setMode+0x98>
 352:	80 95       	com	r24
 354:	82 23       	and	r24, r18
 356:	84 b9       	out	0x04, r24	; 4
 358:	a6 c0       	rjmp	.+332    	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 35a:	24 b1       	in	r18, 0x04	; 4
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	02 c0       	rjmp	.+4      	; 0x366 <GpioWrapper_setMode+0xb4>
 362:	88 0f       	add	r24, r24
 364:	99 1f       	adc	r25, r25
 366:	da 95       	dec	r29
 368:	e2 f7       	brpl	.-8      	; 0x362 <GpioWrapper_setMode+0xb0>
 36a:	82 2b       	or	r24, r18
 36c:	84 b9       	out	0x04, r24	; 4
 36e:	9b c0       	rjmp	.+310    	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 370:	ed 2f       	mov	r30, r29
 372:	f0 e0       	ldi	r31, 0x00	; 0
 374:	e0 5d       	subi	r30, 0xD0	; 208
 376:	fb 4f       	sbci	r31, 0xFB	; 251
 378:	80 81       	ld	r24, Z
 37a:	88 60       	ori	r24, 0x08	; 8
 37c:	80 83       	st	Z, r24
 37e:	93 c0       	rjmp	.+294    	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 380:	11 30       	cpi	r17, 0x01	; 1
 382:	81 f0       	breq	.+32     	; 0x3a4 <GpioWrapper_setMode+0xf2>
 384:	18 f0       	brcs	.+6      	; 0x38c <GpioWrapper_setMode+0xda>
 386:	12 30       	cpi	r17, 0x02	; 2
 388:	c1 f0       	breq	.+48     	; 0x3ba <GpioWrapper_setMode+0x108>
 38a:	8d c0       	rjmp	.+282    	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 38c:	28 b1       	in	r18, 0x08	; 8
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	02 c0       	rjmp	.+4      	; 0x398 <GpioWrapper_setMode+0xe6>
 394:	88 0f       	add	r24, r24
 396:	99 1f       	adc	r25, r25
 398:	da 95       	dec	r29
 39a:	e2 f7       	brpl	.-8      	; 0x394 <GpioWrapper_setMode+0xe2>
 39c:	80 95       	com	r24
 39e:	82 23       	and	r24, r18
 3a0:	88 b9       	out	0x08, r24	; 8
 3a2:	81 c0       	rjmp	.+258    	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 3a4:	28 b1       	in	r18, 0x08	; 8
 3a6:	81 e0       	ldi	r24, 0x01	; 1
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	02 c0       	rjmp	.+4      	; 0x3b0 <GpioWrapper_setMode+0xfe>
 3ac:	88 0f       	add	r24, r24
 3ae:	99 1f       	adc	r25, r25
 3b0:	da 95       	dec	r29
 3b2:	e2 f7       	brpl	.-8      	; 0x3ac <GpioWrapper_setMode+0xfa>
 3b4:	82 2b       	or	r24, r18
 3b6:	88 b9       	out	0x08, r24	; 8
 3b8:	76 c0       	rjmp	.+236    	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 3ba:	ed 2f       	mov	r30, r29
 3bc:	f0 e0       	ldi	r31, 0x00	; 0
 3be:	e0 5b       	subi	r30, 0xB0	; 176
 3c0:	fb 4f       	sbci	r31, 0xFB	; 251
 3c2:	80 81       	ld	r24, Z
 3c4:	88 60       	ori	r24, 0x08	; 8
 3c6:	80 83       	st	Z, r24
 3c8:	6e c0       	rjmp	.+220    	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 3ca:	11 30       	cpi	r17, 0x01	; 1
 3cc:	81 f0       	breq	.+32     	; 0x3ee <GpioWrapper_setMode+0x13c>
 3ce:	18 f0       	brcs	.+6      	; 0x3d6 <GpioWrapper_setMode+0x124>
 3d0:	12 30       	cpi	r17, 0x02	; 2
 3d2:	c1 f0       	breq	.+48     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 3d4:	68 c0       	rjmp	.+208    	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 3d6:	2c b1       	in	r18, 0x0c	; 12
 3d8:	81 e0       	ldi	r24, 0x01	; 1
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	02 c0       	rjmp	.+4      	; 0x3e2 <GpioWrapper_setMode+0x130>
 3de:	88 0f       	add	r24, r24
 3e0:	99 1f       	adc	r25, r25
 3e2:	da 95       	dec	r29
 3e4:	e2 f7       	brpl	.-8      	; 0x3de <GpioWrapper_setMode+0x12c>
 3e6:	80 95       	com	r24
 3e8:	82 23       	and	r24, r18
 3ea:	8c b9       	out	0x0c, r24	; 12
 3ec:	5c c0       	rjmp	.+184    	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 3ee:	2c b1       	in	r18, 0x0c	; 12
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	02 c0       	rjmp	.+4      	; 0x3fa <GpioWrapper_setMode+0x148>
 3f6:	88 0f       	add	r24, r24
 3f8:	99 1f       	adc	r25, r25
 3fa:	da 95       	dec	r29
 3fc:	e2 f7       	brpl	.-8      	; 0x3f6 <GpioWrapper_setMode+0x144>
 3fe:	82 2b       	or	r24, r18
 400:	8c b9       	out	0x0c, r24	; 12
 402:	51 c0       	rjmp	.+162    	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 404:	ed 2f       	mov	r30, r29
 406:	f0 e0       	ldi	r31, 0x00	; 0
 408:	e0 59       	subi	r30, 0x90	; 144
 40a:	fb 4f       	sbci	r31, 0xFB	; 251
 40c:	80 81       	ld	r24, Z
 40e:	88 60       	ori	r24, 0x08	; 8
 410:	80 83       	st	Z, r24
 412:	49 c0       	rjmp	.+146    	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 414:	11 30       	cpi	r17, 0x01	; 1
 416:	81 f0       	breq	.+32     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 418:	18 f0       	brcs	.+6      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 41a:	12 30       	cpi	r17, 0x02	; 2
 41c:	c1 f0       	breq	.+48     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 41e:	43 c0       	rjmp	.+134    	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 420:	20 b3       	in	r18, 0x10	; 16
 422:	81 e0       	ldi	r24, 0x01	; 1
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	02 c0       	rjmp	.+4      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 428:	88 0f       	add	r24, r24
 42a:	99 1f       	adc	r25, r25
 42c:	da 95       	dec	r29
 42e:	e2 f7       	brpl	.-8      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 430:	80 95       	com	r24
 432:	82 23       	and	r24, r18
 434:	80 bb       	out	0x10, r24	; 16
 436:	37 c0       	rjmp	.+110    	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 438:	20 b3       	in	r18, 0x10	; 16
 43a:	81 e0       	ldi	r24, 0x01	; 1
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	02 c0       	rjmp	.+4      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 440:	88 0f       	add	r24, r24
 442:	99 1f       	adc	r25, r25
 444:	da 95       	dec	r29
 446:	e2 f7       	brpl	.-8      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 448:	82 2b       	or	r24, r18
 44a:	80 bb       	out	0x10, r24	; 16
 44c:	2c c0       	rjmp	.+88     	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 44e:	ed 2f       	mov	r30, r29
 450:	f0 e0       	ldi	r31, 0x00	; 0
 452:	e0 57       	subi	r30, 0x70	; 112
 454:	fb 4f       	sbci	r31, 0xFB	; 251
 456:	80 81       	ld	r24, Z
 458:	88 60       	ori	r24, 0x08	; 8
 45a:	80 83       	st	Z, r24
 45c:	24 c0       	rjmp	.+72     	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 45e:	11 30       	cpi	r17, 0x01	; 1
 460:	81 f0       	breq	.+32     	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
 462:	18 f0       	brcs	.+6      	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 464:	12 30       	cpi	r17, 0x02	; 2
 466:	c1 f0       	breq	.+48     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
 468:	1e c0       	rjmp	.+60     	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 46a:	24 b3       	in	r18, 0x14	; 20
 46c:	81 e0       	ldi	r24, 0x01	; 1
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	02 c0       	rjmp	.+4      	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
 472:	88 0f       	add	r24, r24
 474:	99 1f       	adc	r25, r25
 476:	da 95       	dec	r29
 478:	e2 f7       	brpl	.-8      	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
 47a:	80 95       	com	r24
 47c:	82 23       	and	r24, r18
 47e:	84 bb       	out	0x14, r24	; 20
 480:	12 c0       	rjmp	.+36     	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 482:	24 b3       	in	r18, 0x14	; 20
 484:	81 e0       	ldi	r24, 0x01	; 1
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	02 c0       	rjmp	.+4      	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
 48a:	88 0f       	add	r24, r24
 48c:	99 1f       	adc	r25, r25
 48e:	da 95       	dec	r29
 490:	e2 f7       	brpl	.-8      	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
 492:	82 2b       	or	r24, r18
 494:	84 bb       	out	0x14, r24	; 20
 496:	07 c0       	rjmp	.+14     	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 498:	ed 2f       	mov	r30, r29
 49a:	f0 e0       	ldi	r31, 0x00	; 0
 49c:	e0 55       	subi	r30, 0x50	; 80
 49e:	fb 4f       	sbci	r31, 0xFB	; 251
 4a0:	80 81       	ld	r24, Z
 4a2:	88 60       	ori	r24, 0x08	; 8
 4a4:	80 83       	st	Z, r24
 4a6:	df 91       	pop	r29
 4a8:	cf 91       	pop	r28
 4aa:	1f 91       	pop	r17
 4ac:	08 95       	ret

000004ae <GpioWrapper_setPull>:
 4ae:	1f 93       	push	r17
 4b0:	cf 93       	push	r28
 4b2:	df 93       	push	r29
 4b4:	18 2f       	mov	r17, r24
 4b6:	d6 2f       	mov	r29, r22
 4b8:	c4 2f       	mov	r28, r20
 4ba:	0e 94 31 01 	call	0x262	; 0x262 <GpioWrapper_IsGPIOValid>
 4be:	88 23       	and	r24, r24
 4c0:	09 f4       	brne	.+2      	; 0x4c4 <GpioWrapper_setPull+0x16>
 4c2:	6f c0       	rjmp	.+222    	; 0x5a2 <GpioWrapper_setPull+0xf4>
 4c4:	12 30       	cpi	r17, 0x02	; 2
 4c6:	71 f1       	breq	.+92     	; 0x524 <GpioWrapper_setPull+0x76>
 4c8:	28 f4       	brcc	.+10     	; 0x4d4 <GpioWrapper_setPull+0x26>
 4ca:	11 23       	and	r17, r17
 4cc:	59 f0       	breq	.+22     	; 0x4e4 <GpioWrapper_setPull+0x36>
 4ce:	11 30       	cpi	r17, 0x01	; 1
 4d0:	c9 f0       	breq	.+50     	; 0x504 <GpioWrapper_setPull+0x56>
 4d2:	67 c0       	rjmp	.+206    	; 0x5a2 <GpioWrapper_setPull+0xf4>
 4d4:	14 30       	cpi	r17, 0x04	; 4
 4d6:	09 f4       	brne	.+2      	; 0x4da <GpioWrapper_setPull+0x2c>
 4d8:	45 c0       	rjmp	.+138    	; 0x564 <GpioWrapper_setPull+0xb6>
 4da:	a0 f1       	brcs	.+104    	; 0x544 <GpioWrapper_setPull+0x96>
 4dc:	15 30       	cpi	r17, 0x05	; 5
 4de:	09 f4       	brne	.+2      	; 0x4e2 <GpioWrapper_setPull+0x34>
 4e0:	51 c0       	rjmp	.+162    	; 0x584 <GpioWrapper_setPull+0xd6>
 4e2:	5f c0       	rjmp	.+190    	; 0x5a2 <GpioWrapper_setPull+0xf4>
 4e4:	ed 2f       	mov	r30, r29
 4e6:	f0 e0       	ldi	r31, 0x00	; 0
 4e8:	e0 5f       	subi	r30, 0xF0	; 240
 4ea:	fb 4f       	sbci	r31, 0xFB	; 251
 4ec:	c1 30       	cpi	r28, 0x01	; 1
 4ee:	21 f4       	brne	.+8      	; 0x4f8 <GpioWrapper_setPull+0x4a>
 4f0:	80 81       	ld	r24, Z
 4f2:	88 60       	ori	r24, 0x08	; 8
 4f4:	80 83       	st	Z, r24
 4f6:	55 c0       	rjmp	.+170    	; 0x5a2 <GpioWrapper_setPull+0xf4>
 4f8:	c1 11       	cpse	r28, r1
 4fa:	53 c0       	rjmp	.+166    	; 0x5a2 <GpioWrapper_setPull+0xf4>
 4fc:	80 81       	ld	r24, Z
 4fe:	87 7f       	andi	r24, 0xF7	; 247
 500:	80 83       	st	Z, r24
 502:	4f c0       	rjmp	.+158    	; 0x5a2 <GpioWrapper_setPull+0xf4>
 504:	ed 2f       	mov	r30, r29
 506:	f0 e0       	ldi	r31, 0x00	; 0
 508:	e0 5d       	subi	r30, 0xD0	; 208
 50a:	fb 4f       	sbci	r31, 0xFB	; 251
 50c:	c1 30       	cpi	r28, 0x01	; 1
 50e:	21 f4       	brne	.+8      	; 0x518 <GpioWrapper_setPull+0x6a>
 510:	80 81       	ld	r24, Z
 512:	88 60       	ori	r24, 0x08	; 8
 514:	80 83       	st	Z, r24
 516:	45 c0       	rjmp	.+138    	; 0x5a2 <GpioWrapper_setPull+0xf4>
 518:	c1 11       	cpse	r28, r1
 51a:	43 c0       	rjmp	.+134    	; 0x5a2 <GpioWrapper_setPull+0xf4>
 51c:	80 81       	ld	r24, Z
 51e:	87 7f       	andi	r24, 0xF7	; 247
 520:	80 83       	st	Z, r24
 522:	3f c0       	rjmp	.+126    	; 0x5a2 <GpioWrapper_setPull+0xf4>
 524:	ed 2f       	mov	r30, r29
 526:	f0 e0       	ldi	r31, 0x00	; 0
 528:	e0 5b       	subi	r30, 0xB0	; 176
 52a:	fb 4f       	sbci	r31, 0xFB	; 251
 52c:	c1 30       	cpi	r28, 0x01	; 1
 52e:	21 f4       	brne	.+8      	; 0x538 <GpioWrapper_setPull+0x8a>
 530:	80 81       	ld	r24, Z
 532:	88 60       	ori	r24, 0x08	; 8
 534:	80 83       	st	Z, r24
 536:	35 c0       	rjmp	.+106    	; 0x5a2 <GpioWrapper_setPull+0xf4>
 538:	c1 11       	cpse	r28, r1
 53a:	33 c0       	rjmp	.+102    	; 0x5a2 <GpioWrapper_setPull+0xf4>
 53c:	80 81       	ld	r24, Z
 53e:	87 7f       	andi	r24, 0xF7	; 247
 540:	80 83       	st	Z, r24
 542:	2f c0       	rjmp	.+94     	; 0x5a2 <GpioWrapper_setPull+0xf4>
 544:	ed 2f       	mov	r30, r29
 546:	f0 e0       	ldi	r31, 0x00	; 0
 548:	e0 59       	subi	r30, 0x90	; 144
 54a:	fb 4f       	sbci	r31, 0xFB	; 251
 54c:	c1 30       	cpi	r28, 0x01	; 1
 54e:	21 f4       	brne	.+8      	; 0x558 <GpioWrapper_setPull+0xaa>
 550:	80 81       	ld	r24, Z
 552:	88 60       	ori	r24, 0x08	; 8
 554:	80 83       	st	Z, r24
 556:	25 c0       	rjmp	.+74     	; 0x5a2 <GpioWrapper_setPull+0xf4>
 558:	c1 11       	cpse	r28, r1
 55a:	23 c0       	rjmp	.+70     	; 0x5a2 <GpioWrapper_setPull+0xf4>
 55c:	80 81       	ld	r24, Z
 55e:	87 7f       	andi	r24, 0xF7	; 247
 560:	80 83       	st	Z, r24
 562:	1f c0       	rjmp	.+62     	; 0x5a2 <GpioWrapper_setPull+0xf4>
 564:	ed 2f       	mov	r30, r29
 566:	f0 e0       	ldi	r31, 0x00	; 0
 568:	e0 57       	subi	r30, 0x70	; 112
 56a:	fb 4f       	sbci	r31, 0xFB	; 251
 56c:	c1 30       	cpi	r28, 0x01	; 1
 56e:	21 f4       	brne	.+8      	; 0x578 <GpioWrapper_setPull+0xca>
 570:	80 81       	ld	r24, Z
 572:	88 60       	ori	r24, 0x08	; 8
 574:	80 83       	st	Z, r24
 576:	15 c0       	rjmp	.+42     	; 0x5a2 <GpioWrapper_setPull+0xf4>
 578:	c1 11       	cpse	r28, r1
 57a:	13 c0       	rjmp	.+38     	; 0x5a2 <GpioWrapper_setPull+0xf4>
 57c:	80 81       	ld	r24, Z
 57e:	87 7f       	andi	r24, 0xF7	; 247
 580:	80 83       	st	Z, r24
 582:	0f c0       	rjmp	.+30     	; 0x5a2 <GpioWrapper_setPull+0xf4>
 584:	ed 2f       	mov	r30, r29
 586:	f0 e0       	ldi	r31, 0x00	; 0
 588:	e0 55       	subi	r30, 0x50	; 80
 58a:	fb 4f       	sbci	r31, 0xFB	; 251
 58c:	c1 30       	cpi	r28, 0x01	; 1
 58e:	21 f4       	brne	.+8      	; 0x598 <GpioWrapper_setPull+0xea>
 590:	80 81       	ld	r24, Z
 592:	88 60       	ori	r24, 0x08	; 8
 594:	80 83       	st	Z, r24
 596:	05 c0       	rjmp	.+10     	; 0x5a2 <GpioWrapper_setPull+0xf4>
 598:	c1 11       	cpse	r28, r1
 59a:	03 c0       	rjmp	.+6      	; 0x5a2 <GpioWrapper_setPull+0xf4>
 59c:	80 81       	ld	r24, Z
 59e:	87 7f       	andi	r24, 0xF7	; 247
 5a0:	80 83       	st	Z, r24
 5a2:	df 91       	pop	r29
 5a4:	cf 91       	pop	r28
 5a6:	1f 91       	pop	r17
 5a8:	08 95       	ret

000005aa <ConfigureGpioAsAdc>:
 5aa:	cf 93       	push	r28
 5ac:	df 93       	push	r29
 5ae:	c8 2f       	mov	r28, r24
 5b0:	d6 2f       	mov	r29, r22
 5b2:	40 e0       	ldi	r20, 0x00	; 0
 5b4:	0e 94 59 01 	call	0x2b2	; 0x2b2 <GpioWrapper_setMode>
 5b8:	40 e0       	ldi	r20, 0x00	; 0
 5ba:	6d 2f       	mov	r22, r29
 5bc:	8c 2f       	mov	r24, r28
 5be:	0e 94 57 02 	call	0x4ae	; 0x4ae <GpioWrapper_setPull>
 5c2:	df 91       	pop	r29
 5c4:	cf 91       	pop	r28
 5c6:	08 95       	ret

000005c8 <GpioWrapper_setSpeed>:
 5c8:	08 95       	ret

000005ca <GpioWrapper_setOutputType>:
 5ca:	08 95       	ret

000005cc <GpioWrapper_setAlternate>:
 5cc:	1f 93       	push	r17
 5ce:	cf 93       	push	r28
 5d0:	df 93       	push	r29
 5d2:	c8 2f       	mov	r28, r24
 5d4:	d6 2f       	mov	r29, r22
 5d6:	14 2f       	mov	r17, r20
 5d8:	0e 94 31 01 	call	0x262	; 0x262 <GpioWrapper_IsGPIOValid>
 5dc:	81 11       	cpse	r24, r1
 5de:	10 c0       	rjmp	.+32     	; 0x600 <GpioWrapper_setAlternate+0x34>
 5e0:	11 11       	cpse	r17, r1
 5e2:	0e c0       	rjmp	.+28     	; 0x600 <GpioWrapper_setAlternate+0x34>
 5e4:	8d ef       	ldi	r24, 0xFD	; 253
 5e6:	8c 0f       	add	r24, r28
 5e8:	82 30       	cpi	r24, 0x02	; 2
 5ea:	30 f0       	brcs	.+12     	; 0x5f8 <GpioWrapper_setAlternate+0x2c>
 5ec:	c5 30       	cpi	r28, 0x05	; 5
 5ee:	41 f4       	brne	.+16     	; 0x600 <GpioWrapper_setAlternate+0x34>
 5f0:	8e ef       	ldi	r24, 0xFE	; 254
 5f2:	8d 0f       	add	r24, r29
 5f4:	84 30       	cpi	r24, 0x04	; 4
 5f6:	20 f4       	brcc	.+8      	; 0x600 <GpioWrapper_setAlternate+0x34>
 5f8:	6d 2f       	mov	r22, r29
 5fa:	8c 2f       	mov	r24, r28
 5fc:	0e 94 d5 02 	call	0x5aa	; 0x5aa <ConfigureGpioAsAdc>
 600:	df 91       	pop	r29
 602:	cf 91       	pop	r28
 604:	1f 91       	pop	r17
 606:	08 95       	ret

00000608 <GpioWrapper_SetPin>:
 * @param port Pin's port
 * @param pin Pin to be written
 * @param state Value to be written to pin
 */
void GpioWrapper_SetPin(Gpio_portId_t port, Gpio_pinId_t pin, Gpio_pinState_t state)
{
 608:	1f 93       	push	r17
 60a:	cf 93       	push	r28
 60c:	df 93       	push	r29
 60e:	c8 2f       	mov	r28, r24
 610:	d6 2f       	mov	r29, r22
 612:	14 2f       	mov	r17, r20
    if(!GpioWrapper_IsGPIOValid(port,pin))
 614:	0e 94 31 01 	call	0x262	; 0x262 <GpioWrapper_IsGPIOValid>
 618:	88 23       	and	r24, r24
 61a:	09 f4       	brne	.+2      	; 0x61e <GpioWrapper_SetPin+0x16>
 61c:	a7 c0       	rjmp	.+334    	; 0x76c <GpioWrapper_SetPin+0x164>
	{
		//Invalid Pin
		return;
	}
    switch(port)
 61e:	c2 30       	cpi	r28, 0x02	; 2
 620:	09 f4       	brne	.+2      	; 0x624 <GpioWrapper_SetPin+0x1c>
 622:	41 c0       	rjmp	.+130    	; 0x6a6 <GpioWrapper_SetPin+0x9e>
 624:	28 f4       	brcc	.+10     	; 0x630 <GpioWrapper_SetPin+0x28>
 626:	cc 23       	and	r28, r28
 628:	61 f0       	breq	.+24     	; 0x642 <GpioWrapper_SetPin+0x3a>
 62a:	c1 30       	cpi	r28, 0x01	; 1
 62c:	19 f1       	breq	.+70     	; 0x674 <GpioWrapper_SetPin+0x6c>
 62e:	9e c0       	rjmp	.+316    	; 0x76c <GpioWrapper_SetPin+0x164>
 630:	c4 30       	cpi	r28, 0x04	; 4
 632:	09 f4       	brne	.+2      	; 0x636 <GpioWrapper_SetPin+0x2e>
 634:	6a c0       	rjmp	.+212    	; 0x70a <GpioWrapper_SetPin+0x102>
 636:	08 f4       	brcc	.+2      	; 0x63a <GpioWrapper_SetPin+0x32>
 638:	4f c0       	rjmp	.+158    	; 0x6d8 <GpioWrapper_SetPin+0xd0>
 63a:	c5 30       	cpi	r28, 0x05	; 5
 63c:	09 f4       	brne	.+2      	; 0x640 <GpioWrapper_SetPin+0x38>
 63e:	7e c0       	rjmp	.+252    	; 0x73c <GpioWrapper_SetPin+0x134>
 640:	95 c0       	rjmp	.+298    	; 0x76c <GpioWrapper_SetPin+0x164>
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
 642:	11 23       	and	r17, r17
 644:	59 f0       	breq	.+22     	; 0x65c <GpioWrapper_SetPin+0x54>
		VPORTA.OUT |= (1 << pin);
 646:	21 b1       	in	r18, 0x01	; 1
 648:	81 e0       	ldi	r24, 0x01	; 1
 64a:	90 e0       	ldi	r25, 0x00	; 0
 64c:	02 c0       	rjmp	.+4      	; 0x652 <GpioWrapper_SetPin+0x4a>
 64e:	88 0f       	add	r24, r24
 650:	99 1f       	adc	r25, r25
 652:	da 95       	dec	r29
 654:	e2 f7       	brpl	.-8      	; 0x64e <GpioWrapper_SetPin+0x46>
 656:	82 2b       	or	r24, r18
 658:	81 b9       	out	0x01, r24	; 1
 65a:	88 c0       	rjmp	.+272    	; 0x76c <GpioWrapper_SetPin+0x164>
	} else {
		VPORTA.OUT &= ~(1 << pin);
 65c:	21 b1       	in	r18, 0x01	; 1
 65e:	81 e0       	ldi	r24, 0x01	; 1
 660:	90 e0       	ldi	r25, 0x00	; 0
 662:	02 c0       	rjmp	.+4      	; 0x668 <GpioWrapper_SetPin+0x60>
 664:	88 0f       	add	r24, r24
 666:	99 1f       	adc	r25, r25
 668:	da 95       	dec	r29
 66a:	e2 f7       	brpl	.-8      	; 0x664 <GpioWrapper_SetPin+0x5c>
 66c:	80 95       	com	r24
 66e:	82 23       	and	r24, r18
 670:	81 b9       	out	0x01, r24	; 1
 672:	7c c0       	rjmp	.+248    	; 0x76c <GpioWrapper_SetPin+0x164>
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
 674:	11 23       	and	r17, r17
 676:	59 f0       	breq	.+22     	; 0x68e <GpioWrapper_SetPin+0x86>
		VPORTB.OUT |= (1 << pin);
 678:	25 b1       	in	r18, 0x05	; 5
 67a:	81 e0       	ldi	r24, 0x01	; 1
 67c:	90 e0       	ldi	r25, 0x00	; 0
 67e:	02 c0       	rjmp	.+4      	; 0x684 <GpioWrapper_SetPin+0x7c>
 680:	88 0f       	add	r24, r24
 682:	99 1f       	adc	r25, r25
 684:	da 95       	dec	r29
 686:	e2 f7       	brpl	.-8      	; 0x680 <GpioWrapper_SetPin+0x78>
 688:	82 2b       	or	r24, r18
 68a:	85 b9       	out	0x05, r24	; 5
 68c:	6f c0       	rjmp	.+222    	; 0x76c <GpioWrapper_SetPin+0x164>
	} else {
		VPORTB.OUT &= ~(1 << pin);
 68e:	25 b1       	in	r18, 0x05	; 5
 690:	81 e0       	ldi	r24, 0x01	; 1
 692:	90 e0       	ldi	r25, 0x00	; 0
 694:	02 c0       	rjmp	.+4      	; 0x69a <GpioWrapper_SetPin+0x92>
 696:	88 0f       	add	r24, r24
 698:	99 1f       	adc	r25, r25
 69a:	da 95       	dec	r29
 69c:	e2 f7       	brpl	.-8      	; 0x696 <GpioWrapper_SetPin+0x8e>
 69e:	80 95       	com	r24
 6a0:	82 23       	and	r24, r18
 6a2:	85 b9       	out	0x05, r24	; 5
 6a4:	63 c0       	rjmp	.+198    	; 0x76c <GpioWrapper_SetPin+0x164>
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
 6a6:	11 23       	and	r17, r17
 6a8:	59 f0       	breq	.+22     	; 0x6c0 <GpioWrapper_SetPin+0xb8>
		VPORTC.OUT |= (1 << pin);
 6aa:	29 b1       	in	r18, 0x09	; 9
 6ac:	81 e0       	ldi	r24, 0x01	; 1
 6ae:	90 e0       	ldi	r25, 0x00	; 0
 6b0:	02 c0       	rjmp	.+4      	; 0x6b6 <GpioWrapper_SetPin+0xae>
 6b2:	88 0f       	add	r24, r24
 6b4:	99 1f       	adc	r25, r25
 6b6:	da 95       	dec	r29
 6b8:	e2 f7       	brpl	.-8      	; 0x6b2 <GpioWrapper_SetPin+0xaa>
 6ba:	82 2b       	or	r24, r18
 6bc:	89 b9       	out	0x09, r24	; 9
 6be:	56 c0       	rjmp	.+172    	; 0x76c <GpioWrapper_SetPin+0x164>
	} else {
		VPORTC.OUT &= ~(1 << pin);
 6c0:	29 b1       	in	r18, 0x09	; 9
 6c2:	81 e0       	ldi	r24, 0x01	; 1
 6c4:	90 e0       	ldi	r25, 0x00	; 0
 6c6:	02 c0       	rjmp	.+4      	; 0x6cc <GpioWrapper_SetPin+0xc4>
 6c8:	88 0f       	add	r24, r24
 6ca:	99 1f       	adc	r25, r25
 6cc:	da 95       	dec	r29
 6ce:	e2 f7       	brpl	.-8      	; 0x6c8 <GpioWrapper_SetPin+0xc0>
 6d0:	80 95       	com	r24
 6d2:	82 23       	and	r24, r18
 6d4:	89 b9       	out	0x09, r24	; 9
 6d6:	4a c0       	rjmp	.+148    	; 0x76c <GpioWrapper_SetPin+0x164>
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
 6d8:	11 23       	and	r17, r17
 6da:	59 f0       	breq	.+22     	; 0x6f2 <GpioWrapper_SetPin+0xea>
		VPORTD.OUT |= (1 << pin);
 6dc:	2d b1       	in	r18, 0x0d	; 13
 6de:	81 e0       	ldi	r24, 0x01	; 1
 6e0:	90 e0       	ldi	r25, 0x00	; 0
 6e2:	02 c0       	rjmp	.+4      	; 0x6e8 <GpioWrapper_SetPin+0xe0>
 6e4:	88 0f       	add	r24, r24
 6e6:	99 1f       	adc	r25, r25
 6e8:	da 95       	dec	r29
 6ea:	e2 f7       	brpl	.-8      	; 0x6e4 <GpioWrapper_SetPin+0xdc>
 6ec:	82 2b       	or	r24, r18
 6ee:	8d b9       	out	0x0d, r24	; 13
 6f0:	3d c0       	rjmp	.+122    	; 0x76c <GpioWrapper_SetPin+0x164>
	} else {
		VPORTD.OUT &= ~(1 << pin);
 6f2:	2d b1       	in	r18, 0x0d	; 13
 6f4:	81 e0       	ldi	r24, 0x01	; 1
 6f6:	90 e0       	ldi	r25, 0x00	; 0
 6f8:	02 c0       	rjmp	.+4      	; 0x6fe <GpioWrapper_SetPin+0xf6>
 6fa:	88 0f       	add	r24, r24
 6fc:	99 1f       	adc	r25, r25
 6fe:	da 95       	dec	r29
 700:	e2 f7       	brpl	.-8      	; 0x6fa <GpioWrapper_SetPin+0xf2>
 702:	80 95       	com	r24
 704:	82 23       	and	r24, r18
 706:	8d b9       	out	0x0d, r24	; 13
 708:	31 c0       	rjmp	.+98     	; 0x76c <GpioWrapper_SetPin+0x164>
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTE_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
 70a:	11 23       	and	r17, r17
 70c:	59 f0       	breq	.+22     	; 0x724 <GpioWrapper_SetPin+0x11c>
		VPORTE.OUT |= (1 << pin);
 70e:	21 b3       	in	r18, 0x11	; 17
 710:	81 e0       	ldi	r24, 0x01	; 1
 712:	90 e0       	ldi	r25, 0x00	; 0
 714:	02 c0       	rjmp	.+4      	; 0x71a <GpioWrapper_SetPin+0x112>
 716:	88 0f       	add	r24, r24
 718:	99 1f       	adc	r25, r25
 71a:	da 95       	dec	r29
 71c:	e2 f7       	brpl	.-8      	; 0x716 <GpioWrapper_SetPin+0x10e>
 71e:	82 2b       	or	r24, r18
 720:	81 bb       	out	0x11, r24	; 17
 722:	24 c0       	rjmp	.+72     	; 0x76c <GpioWrapper_SetPin+0x164>
	} else {
		VPORTE.OUT &= ~(1 << pin);
 724:	21 b3       	in	r18, 0x11	; 17
 726:	81 e0       	ldi	r24, 0x01	; 1
 728:	90 e0       	ldi	r25, 0x00	; 0
 72a:	02 c0       	rjmp	.+4      	; 0x730 <GpioWrapper_SetPin+0x128>
 72c:	88 0f       	add	r24, r24
 72e:	99 1f       	adc	r25, r25
 730:	da 95       	dec	r29
 732:	e2 f7       	brpl	.-8      	; 0x72c <GpioWrapper_SetPin+0x124>
 734:	80 95       	com	r24
 736:	82 23       	and	r24, r18
 738:	81 bb       	out	0x11, r24	; 17
 73a:	18 c0       	rjmp	.+48     	; 0x76c <GpioWrapper_SetPin+0x164>
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTF_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
 73c:	11 23       	and	r17, r17
 73e:	59 f0       	breq	.+22     	; 0x756 <GpioWrapper_SetPin+0x14e>
		VPORTF.OUT |= (1 << pin);
 740:	25 b3       	in	r18, 0x15	; 21
 742:	81 e0       	ldi	r24, 0x01	; 1
 744:	90 e0       	ldi	r25, 0x00	; 0
 746:	02 c0       	rjmp	.+4      	; 0x74c <GpioWrapper_SetPin+0x144>
 748:	88 0f       	add	r24, r24
 74a:	99 1f       	adc	r25, r25
 74c:	da 95       	dec	r29
 74e:	e2 f7       	brpl	.-8      	; 0x748 <GpioWrapper_SetPin+0x140>
 750:	82 2b       	or	r24, r18
 752:	85 bb       	out	0x15, r24	; 21
 754:	0b c0       	rjmp	.+22     	; 0x76c <GpioWrapper_SetPin+0x164>
	} else {
		VPORTF.OUT &= ~(1 << pin);
 756:	25 b3       	in	r18, 0x15	; 21
 758:	81 e0       	ldi	r24, 0x01	; 1
 75a:	90 e0       	ldi	r25, 0x00	; 0
 75c:	02 c0       	rjmp	.+4      	; 0x762 <GpioWrapper_SetPin+0x15a>
 75e:	88 0f       	add	r24, r24
 760:	99 1f       	adc	r25, r25
 762:	da 95       	dec	r29
 764:	e2 f7       	brpl	.-8      	; 0x75e <GpioWrapper_SetPin+0x156>
 766:	80 95       	com	r24
 768:	82 23       	and	r24, r18
 76a:	85 bb       	out	0x15, r24	; 21
	        PORTF_set_pin_level(pin,state);
	        break;
	    default:
	        break;
    }   
}
 76c:	df 91       	pop	r29
 76e:	cf 91       	pop	r28
 770:	1f 91       	pop	r17
 772:	08 95       	ret

00000774 <printVoltage>:

/***********************
 * Function Definitions *
 ***********************/
void printVoltage(float voltage)
{
 774:	8f 92       	push	r8
 776:	9f 92       	push	r9
 778:	af 92       	push	r10
 77a:	bf 92       	push	r11
 77c:	ef 92       	push	r14
 77e:	ff 92       	push	r15
 780:	0f 93       	push	r16
 782:	1f 93       	push	r17
 784:	cf 93       	push	r28
 786:	df 93       	push	r29
 788:	cd b7       	in	r28, 0x3d	; 61
 78a:	de b7       	in	r29, 0x3e	; 62
 78c:	62 97       	sbiw	r28, 0x12	; 18
 78e:	cd bf       	out	0x3d, r28	; 61
 790:	de bf       	out	0x3e, r29	; 62
 792:	4b 01       	movw	r8, r22
 794:	5c 01       	movw	r10, r24
	char data[]  = {"Measured Voltage:"};
 796:	82 e1       	ldi	r24, 0x12	; 18
 798:	ef ee       	ldi	r30, 0xEF	; 239
 79a:	fe e4       	ldi	r31, 0x4E	; 78
 79c:	de 01       	movw	r26, r28
 79e:	11 96       	adiw	r26, 0x01	; 1
 7a0:	01 90       	ld	r0, Z+
 7a2:	0d 92       	st	X+, r0
 7a4:	8a 95       	dec	r24
 7a6:	e1 f7       	brne	.-8      	; 0x7a0 <printVoltage+0x2c>
	data[17] = (int)(voltage + 48);
 7a8:	20 e0       	ldi	r18, 0x00	; 0
 7aa:	30 e0       	ldi	r19, 0x00	; 0
 7ac:	40 e4       	ldi	r20, 0x40	; 64
 7ae:	52 e4       	ldi	r21, 0x42	; 66
 7b0:	c5 01       	movw	r24, r10
 7b2:	b4 01       	movw	r22, r8
 7b4:	0e 94 2e 05 	call	0xa5c	; 0xa5c <__addsf3>
 7b8:	0e 94 11 06 	call	0xc22	; 0xc22 <__fixsfsi>
 7bc:	6a 8b       	std	Y+18, r22	; 0x12
 7be:	8e 01       	movw	r16, r28
 7c0:	0f 5f       	subi	r16, 0xFF	; 255
 7c2:	1f 4f       	sbci	r17, 0xFF	; 255
 7c4:	7e 01       	movw	r14, r28
 7c6:	83 e1       	ldi	r24, 0x13	; 19
 7c8:	e8 0e       	add	r14, r24
 7ca:	f1 1c       	adc	r15, r1
	for(uint8_t i = 0; i <18; i++)
	{
	    USART_0_write(data[i]);
 7cc:	f8 01       	movw	r30, r16
 7ce:	81 91       	ld	r24, Z+
 7d0:	8f 01       	movw	r16, r30
 7d2:	0e 94 25 05 	call	0xa4a	; 0xa4a <USART_0_write>
 ***********************/
void printVoltage(float voltage)
{
	char data[]  = {"Measured Voltage:"};
	data[17] = (int)(voltage + 48);
	for(uint8_t i = 0; i <18; i++)
 7d6:	0e 15       	cp	r16, r14
 7d8:	1f 05       	cpc	r17, r15
 7da:	c1 f7       	brne	.-16     	; 0x7cc <printVoltage+0x58>
	{
	    USART_0_write(data[i]);
	}
	USART_0_write(46);
 7dc:	8e e2       	ldi	r24, 0x2E	; 46
 7de:	0e 94 25 05 	call	0xa4a	; 0xa4a <USART_0_write>
    USART_0_write (((int) ((voltage - (int)voltage)*10))+48);
 7e2:	c5 01       	movw	r24, r10
 7e4:	b4 01       	movw	r22, r8
 7e6:	0e 94 11 06 	call	0xc22	; 0xc22 <__fixsfsi>
 7ea:	07 2e       	mov	r0, r23
 7ec:	00 0c       	add	r0, r0
 7ee:	88 0b       	sbc	r24, r24
 7f0:	99 0b       	sbc	r25, r25
 7f2:	0e 94 49 06 	call	0xc92	; 0xc92 <__floatsisf>
 7f6:	9b 01       	movw	r18, r22
 7f8:	ac 01       	movw	r20, r24
 7fa:	c5 01       	movw	r24, r10
 7fc:	b4 01       	movw	r22, r8
 7fe:	0e 94 2d 05 	call	0xa5a	; 0xa5a <__subsf3>
 802:	20 e0       	ldi	r18, 0x00	; 0
 804:	30 e0       	ldi	r19, 0x00	; 0
 806:	40 e2       	ldi	r20, 0x20	; 32
 808:	51 e4       	ldi	r21, 0x41	; 65
 80a:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <__mulsf3>
 80e:	0e 94 11 06 	call	0xc22	; 0xc22 <__fixsfsi>
 812:	80 e3       	ldi	r24, 0x30	; 48
 814:	86 0f       	add	r24, r22
 816:	0e 94 25 05 	call	0xa4a	; 0xa4a <USART_0_write>
	USART_0_write(((voltage*10 -((int)(voltage*10)))*10)+48);
 81a:	20 e0       	ldi	r18, 0x00	; 0
 81c:	30 e0       	ldi	r19, 0x00	; 0
 81e:	40 e2       	ldi	r20, 0x20	; 32
 820:	51 e4       	ldi	r21, 0x41	; 65
 822:	c5 01       	movw	r24, r10
 824:	b4 01       	movw	r22, r8
 826:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <__mulsf3>
 82a:	4b 01       	movw	r8, r22
 82c:	5c 01       	movw	r10, r24
 82e:	0e 94 11 06 	call	0xc22	; 0xc22 <__fixsfsi>
 832:	07 2e       	mov	r0, r23
 834:	00 0c       	add	r0, r0
 836:	88 0b       	sbc	r24, r24
 838:	99 0b       	sbc	r25, r25
 83a:	0e 94 49 06 	call	0xc92	; 0xc92 <__floatsisf>
 83e:	9b 01       	movw	r18, r22
 840:	ac 01       	movw	r20, r24
 842:	c5 01       	movw	r24, r10
 844:	b4 01       	movw	r22, r8
 846:	0e 94 2d 05 	call	0xa5a	; 0xa5a <__subsf3>
 84a:	20 e0       	ldi	r18, 0x00	; 0
 84c:	30 e0       	ldi	r19, 0x00	; 0
 84e:	40 e2       	ldi	r20, 0x20	; 32
 850:	51 e4       	ldi	r21, 0x41	; 65
 852:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <__mulsf3>
 856:	20 e0       	ldi	r18, 0x00	; 0
 858:	30 e0       	ldi	r19, 0x00	; 0
 85a:	40 e4       	ldi	r20, 0x40	; 64
 85c:	52 e4       	ldi	r21, 0x42	; 66
 85e:	0e 94 2e 05 	call	0xa5c	; 0xa5c <__addsf3>
 862:	0e 94 18 06 	call	0xc30	; 0xc30 <__fixunssfsi>
 866:	86 2f       	mov	r24, r22
 868:	0e 94 25 05 	call	0xa4a	; 0xa4a <USART_0_write>
}
 86c:	62 96       	adiw	r28, 0x12	; 18
 86e:	cd bf       	out	0x3d, r28	; 61
 870:	de bf       	out	0x3e, r29	; 62
 872:	df 91       	pop	r29
 874:	cf 91       	pop	r28
 876:	1f 91       	pop	r17
 878:	0f 91       	pop	r16
 87a:	ff 90       	pop	r15
 87c:	ef 90       	pop	r14
 87e:	bf 90       	pop	r11
 880:	af 90       	pop	r10
 882:	9f 90       	pop	r9
 884:	8f 90       	pop	r8
 886:	08 95       	ret

00000888 <main>:
*. Description:
*. C entry point, executes the systems initialization and application
*.
\********************************************************************/
int main(void)
{
 888:	cf 93       	push	r28
 88a:	df 93       	push	r29
 88c:	cd b7       	in	r28, 0x3d	; 61
 88e:	de b7       	in	r29, 0x3e	; 62
 890:	26 97       	sbiw	r28, 0x06	; 6
 892:	cd bf       	out	0x3d, r28	; 61
 894:	de bf       	out	0x3e, r29	; 62
	Gpio_pinState_t ledState = LED_OFF;
	volatile uint16_t ADC_Value = 0;
 896:	19 82       	std	Y+1, r1	; 0x01
 898:	1a 82       	std	Y+2, r1	; 0x02
    volatile float voltage =0;
 89a:	1b 82       	std	Y+3, r1	; 0x03
 89c:	1c 82       	std	Y+4, r1	; 0x04
 89e:	1d 82       	std	Y+5, r1	; 0x05
 8a0:	1e 82       	std	Y+6, r1	; 0x06
    // Initialize basic hardware functionality
    HWInit();
 8a2:	0e 94 64 00 	call	0xc8	; 0xc8 <atmel_start_init>
    // Initialize GPIOs
    Gpio_InitDefaults(Gpio_Cfg);
 8a6:	87 ed       	ldi	r24, 0xD7	; 215
 8a8:	9e e4       	ldi	r25, 0x4E	; 78
 8aa:	0e 94 9d 00 	call	0x13a	; 0x13a <Gpio_InitDefaults>
    //Initialize ADC
    Adc_Init(Adc_Cfg);
 8ae:	80 ed       	ldi	r24, 0xD0	; 208
 8b0:	9e e4       	ldi	r25, 0x4E	; 78
 8b2:	0e 94 67 00 	call	0xce	; 0xce <Adc_Init>
    //Perform ADC Calibration
    Adc_CalibrateAdc(MCU_ADC1_ID);
 8b6:	80 e0       	ldi	r24, 0x00	; 0
 8b8:	0e 94 8e 00 	call	0x11c	; 0x11c <Adc_CalibrateAdc>
    //Select ADC Channel
    Adc_SetChannel(MCU_ADC1_ID, ADC_CHANNEL_0);
 8bc:	60 e0       	ldi	r22, 0x00	; 0
 8be:	80 e0       	ldi	r24, 0x00	; 0
 8c0:	0e 94 8b 00 	call	0x116	; 0x116 <Adc_SetChannel>
	//Enable ADC
	Adc_EnableAdc(MCU_ADC1_ID);
 8c4:	80 e0       	ldi	r24, 0x00	; 0
 8c6:	0e 94 91 00 	call	0x122	; 0x122 <Adc_EnableAdc>
            }
            else
            {
	            ledState = LED_OFF;
            }
            Gpio_SetPin(USER_LED_PORT, USER_LED_PIN, ledState);
 8ca:	11 e0       	ldi	r17, 0x01	; 1
    Adc_SetChannel(MCU_ADC1_ID, ADC_CHANNEL_0);
	//Enable ADC
	Adc_EnableAdc(MCU_ADC1_ID);
	while (true) 
	{
		if(USART_0_read() == 48)
 8cc:	0e 94 1d 05 	call	0xa3a	; 0xa3a <USART_0_read>
 8d0:	80 33       	cpi	r24, 0x30	; 48
 8d2:	e1 f7       	brne	.-8      	; 0x8cc <main+0x44>
		{
		    Adc_StartConversion(MCU_ADC1_ID);
 8d4:	80 e0       	ldi	r24, 0x00	; 0
 8d6:	0e 94 9a 00 	call	0x134	; 0x134 <Adc_StartConversion>
		    while(Adc_GetConversionStatus(MCU_ADC1_ID) != CONVERSION_READY)
 8da:	80 e0       	ldi	r24, 0x00	; 0
 8dc:	0e 94 97 00 	call	0x12e	; 0x12e <Adc_GetConversionStatus>
 8e0:	81 30       	cpi	r24, 0x01	; 1
 8e2:	d9 f7       	brne	.-10     	; 0x8da <main+0x52>
		    {
		    }
		    ADC_Value = Adc_GetResult(MCU_ADC1_ID);
 8e4:	80 e0       	ldi	r24, 0x00	; 0
 8e6:	0e 94 94 00 	call	0x128	; 0x128 <Adc_GetResult>
 8ea:	89 83       	std	Y+1, r24	; 0x01
 8ec:	9a 83       	std	Y+2, r25	; 0x02
		    //if (Gpio_GetPin(USER_BUTTON_PORT, USER_BUTTON_PIN) == BUTTON_PRESSED)
		    voltage = (3.27*ADC_Value)/1023;
 8ee:	69 81       	ldd	r22, Y+1	; 0x01
 8f0:	7a 81       	ldd	r23, Y+2	; 0x02
 8f2:	80 e0       	ldi	r24, 0x00	; 0
 8f4:	90 e0       	ldi	r25, 0x00	; 0
 8f6:	0e 94 47 06 	call	0xc8e	; 0xc8e <__floatunsisf>
 8fa:	2e ea       	ldi	r18, 0xAE	; 174
 8fc:	37 e4       	ldi	r19, 0x47	; 71
 8fe:	41 e5       	ldi	r20, 0x51	; 81
 900:	50 e4       	ldi	r21, 0x40	; 64
 902:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <__mulsf3>
 906:	20 e0       	ldi	r18, 0x00	; 0
 908:	30 ec       	ldi	r19, 0xC0	; 192
 90a:	4f e7       	ldi	r20, 0x7F	; 127
 90c:	54 e4       	ldi	r21, 0x44	; 68
 90e:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__divsf3>
 912:	6b 83       	std	Y+3, r22	; 0x03
 914:	7c 83       	std	Y+4, r23	; 0x04
 916:	8d 83       	std	Y+5, r24	; 0x05
 918:	9e 83       	std	Y+6, r25	; 0x06
			printVoltage(voltage);
 91a:	6b 81       	ldd	r22, Y+3	; 0x03
 91c:	7c 81       	ldd	r23, Y+4	; 0x04
 91e:	8d 81       	ldd	r24, Y+5	; 0x05
 920:	9e 81       	ldd	r25, Y+6	; 0x06
 922:	0e 94 ba 03 	call	0x774	; 0x774 <printVoltage>
		    if(voltage < 2.5)
 926:	6b 81       	ldd	r22, Y+3	; 0x03
 928:	7c 81       	ldd	r23, Y+4	; 0x04
 92a:	8d 81       	ldd	r24, Y+5	; 0x05
 92c:	9e 81       	ldd	r25, Y+6	; 0x06
            }
            else
            {
	            ledState = LED_OFF;
            }
            Gpio_SetPin(USER_LED_PORT, USER_LED_PIN, ledState);
 92e:	20 e0       	ldi	r18, 0x00	; 0
 930:	30 e0       	ldi	r19, 0x00	; 0
 932:	40 e2       	ldi	r20, 0x20	; 32
 934:	50 e4       	ldi	r21, 0x40	; 64
 936:	0e 94 9a 05 	call	0xb34	; 0xb34 <__cmpsf2>
 93a:	88 0f       	add	r24, r24
 93c:	88 0b       	sbc	r24, r24
 93e:	48 2f       	mov	r20, r24
 940:	41 23       	and	r20, r17
 942:	41 27       	eor	r20, r17
 944:	65 e0       	ldi	r22, 0x05	; 5
 946:	81 2f       	mov	r24, r17
 948:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <Gpio_SetPin>
 94c:	bf cf       	rjmp	.-130    	; 0x8cc <main+0x44>

0000094e <ADC_0_enable>:
 *
 * \return Nothing
 */
void ADC_0_disable()
{
	ADC0.CTRLA &= ~ADC_ENABLE_bm;
 94e:	e0 e0       	ldi	r30, 0x00	; 0
 950:	f6 e0       	ldi	r31, 0x06	; 6
 952:	80 81       	ld	r24, Z
 954:	81 60       	ori	r24, 0x01	; 1
 956:	80 83       	st	Z, r24
 958:	08 95       	ret

0000095a <ADC_0_start_conversion>:
 *
 * \return Nothing
 */
void ADC_0_start_conversion(adc_0_channel_t channel)
{
	ADC0.MUXPOS  = channel;
 95a:	e0 e0       	ldi	r30, 0x00	; 0
 95c:	f6 e0       	ldi	r31, 0x06	; 6
 95e:	86 83       	std	Z+6, r24	; 0x06
	ADC0.COMMAND = ADC_STCONV_bm;
 960:	81 e0       	ldi	r24, 0x01	; 1
 962:	80 87       	std	Z+8, r24	; 0x08
 964:	08 95       	ret

00000966 <ADC_0_is_conversion_done>:
 * \retval true The ADC conversion is done
 * \retval false The ADC converison is not done
 */
bool ADC_0_is_conversion_done()
{
	return (ADC0.INTFLAGS & ADC_RESRDY_bm);
 966:	80 91 0b 06 	lds	r24, 0x060B	; 0x80060b <__TEXT_REGION_LENGTH__+0x7f460b>
}
 96a:	81 70       	andi	r24, 0x01	; 1
 96c:	08 95       	ret

0000096e <ADC_0_get_conversion_result>:
 *
 * \return Conversion result read from the ADC_0 ADC module
 */
adc_result_t ADC_0_get_conversion_result(void)
{
	return (ADC0.RES);
 96e:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x7f4610>
 972:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x7f4611>
}
 976:	08 95       	ret

00000978 <BOD_init>:
	//		 | BOD_VLMCFG_BELOW_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
 978:	80 e0       	ldi	r24, 0x00	; 0
 97a:	08 95       	ret

0000097c <CLKCTRL_init>:
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
}
 97c:	80 e0       	ldi	r24, 0x00	; 0
 97e:	08 95       	ret

00000980 <CPUINT_init>:
	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	return 0;
}
 980:	80 e0       	ldi	r24, 0x00	; 0
 982:	08 95       	ret

00000984 <mcu_init>:
	// Disable digital input buffer
	Pot_set_isc(PORT_ISC_INPUT_DISABLE_gc);
	// Disable pull-up resistor
	Pot_set_pull_mode(PORT_PULL_OFF);

	ADC_0_init();
 984:	e0 e1       	ldi	r30, 0x10	; 16
 986:	f4 e0       	ldi	r31, 0x04	; 4
 988:	80 81       	ld	r24, Z
 98a:	88 60       	ori	r24, 0x08	; 8
 98c:	81 93       	st	Z+, r24
 98e:	e8 31       	cpi	r30, 0x18	; 24
 990:	84 e0       	ldi	r24, 0x04	; 4
 992:	f8 07       	cpc	r31, r24
 994:	c9 f7       	brne	.-14     	; 0x988 <mcu_init+0x4>
 996:	e0 e3       	ldi	r30, 0x30	; 48
 998:	f4 e0       	ldi	r31, 0x04	; 4
 99a:	80 81       	ld	r24, Z
 99c:	88 60       	ori	r24, 0x08	; 8
 99e:	81 93       	st	Z+, r24
 9a0:	e8 33       	cpi	r30, 0x38	; 56
 9a2:	84 e0       	ldi	r24, 0x04	; 4
 9a4:	f8 07       	cpc	r31, r24
 9a6:	c9 f7       	brne	.-14     	; 0x99a <mcu_init+0x16>
 9a8:	e0 e5       	ldi	r30, 0x50	; 80
 9aa:	f4 e0       	ldi	r31, 0x04	; 4
 9ac:	80 81       	ld	r24, Z
 9ae:	88 60       	ori	r24, 0x08	; 8
 9b0:	81 93       	st	Z+, r24
 9b2:	e8 35       	cpi	r30, 0x58	; 88
 9b4:	84 e0       	ldi	r24, 0x04	; 4
 9b6:	f8 07       	cpc	r31, r24
 9b8:	c9 f7       	brne	.-14     	; 0x9ac <mcu_init+0x28>
 9ba:	e0 e7       	ldi	r30, 0x70	; 112
 9bc:	f4 e0       	ldi	r31, 0x04	; 4
 9be:	80 81       	ld	r24, Z
 9c0:	88 60       	ori	r24, 0x08	; 8
 9c2:	81 93       	st	Z+, r24
 9c4:	e8 37       	cpi	r30, 0x78	; 120
 9c6:	84 e0       	ldi	r24, 0x04	; 4
 9c8:	f8 07       	cpc	r31, r24
 9ca:	c9 f7       	brne	.-14     	; 0x9be <mcu_init+0x3a>
 9cc:	e0 e9       	ldi	r30, 0x90	; 144
 9ce:	f4 e0       	ldi	r31, 0x04	; 4
 9d0:	80 81       	ld	r24, Z
 9d2:	88 60       	ori	r24, 0x08	; 8
 9d4:	81 93       	st	Z+, r24
 9d6:	e8 39       	cpi	r30, 0x98	; 152
 9d8:	84 e0       	ldi	r24, 0x04	; 4
 9da:	f8 07       	cpc	r31, r24
 9dc:	c9 f7       	brne	.-14     	; 0x9d0 <mcu_init+0x4c>
 9de:	e0 eb       	ldi	r30, 0xB0	; 176
 9e0:	f4 e0       	ldi	r31, 0x04	; 4
 9e2:	80 81       	ld	r24, Z
 9e4:	88 60       	ori	r24, 0x08	; 8
 9e6:	81 93       	st	Z+, r24
 9e8:	e8 3b       	cpi	r30, 0xB8	; 184
 9ea:	84 e0       	ldi	r24, 0x04	; 4
 9ec:	f8 07       	cpc	r31, r24
 9ee:	c9 f7       	brne	.-14     	; 0x9e2 <mcu_init+0x5e>
 9f0:	08 95       	ret

000009f2 <USART_0_initialization>:
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
 9f2:	41 98       	cbi	0x08, 1	; 8
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 9f4:	e1 e5       	ldi	r30, 0x51	; 81
 9f6:	f4 e0       	ldi	r31, 0x04	; 4
 9f8:	80 81       	ld	r24, Z
 9fa:	87 7f       	andi	r24, 0xF7	; 247
 9fc:	80 83       	st	Z, r24
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
 9fe:	40 9a       	sbi	0x08, 0	; 8
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
 a00:	48 98       	cbi	0x09, 0	; 9
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	USART_0_init();
 a02:	0e 94 13 05 	call	0xa26	; 0xa26 <USART_0_init>
 a06:	08 95       	ret

00000a08 <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
 a08:	0e 94 c2 04 	call	0x984	; 0x984 <mcu_init>

	CLKCTRL_init();
 a0c:	0e 94 be 04 	call	0x97c	; 0x97c <CLKCTRL_init>

	//ADC_0_initialization();

	USART_0_initialization();
 a10:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <USART_0_initialization>

	CPUINT_init();
 a14:	0e 94 c0 04 	call	0x980	; 0x980 <CPUINT_init>

	SLPCTRL_init();
 a18:	0e 94 11 05 	call	0xa22	; 0xa22 <SLPCTRL_init>

	BOD_init();
 a1c:	0e 94 bc 04 	call	0x978	; 0x978 <BOD_init>
 a20:	08 95       	ret

00000a22 <SLPCTRL_init>:

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
}
 a22:	80 e0       	ldi	r24, 0x00	; 0
 a24:	08 95       	ret

00000a26 <USART_0_init>:
 * \retval false Data completely shifted out if the USART shift register
 */
bool USART_0_is_tx_busy()
{
	return (!(USART1.STATUS & USART_TXCIF_bm));
}
 a26:	e0 e2       	ldi	r30, 0x20	; 32
 a28:	f8 e0       	ldi	r31, 0x08	; 8
 a2a:	8d e6       	ldi	r24, 0x6D	; 109
 a2c:	95 e0       	ldi	r25, 0x05	; 5
 a2e:	80 87       	std	Z+8, r24	; 0x08
 a30:	91 87       	std	Z+9, r25	; 0x09
 a32:	80 ec       	ldi	r24, 0xC0	; 192
 a34:	86 83       	std	Z+6, r24	; 0x06
 a36:	80 e0       	ldi	r24, 0x00	; 0
 a38:	08 95       	ret

00000a3a <USART_0_read>:
 *
 * \return Data read from the USART_0 module
 */
uint8_t USART_0_read()
{
	while (!(USART1.STATUS & USART_RXCIF_bm))
 a3a:	e0 e2       	ldi	r30, 0x20	; 32
 a3c:	f8 e0       	ldi	r31, 0x08	; 8
 a3e:	84 81       	ldd	r24, Z+4	; 0x04
 a40:	88 23       	and	r24, r24
 a42:	ec f7       	brge	.-6      	; 0xa3e <USART_0_read+0x4>
		;
	return USART1.RXDATAL;
 a44:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x7f4820>
}
 a48:	08 95       	ret

00000a4a <USART_0_write>:
 *
 * \return Nothing
 */
void USART_0_write(const uint8_t data)
{
	while (!(USART1.STATUS & USART_DREIF_bm))
 a4a:	e0 e2       	ldi	r30, 0x20	; 32
 a4c:	f8 e0       	ldi	r31, 0x08	; 8
 a4e:	94 81       	ldd	r25, Z+4	; 0x04
 a50:	95 ff       	sbrs	r25, 5
 a52:	fd cf       	rjmp	.-6      	; 0xa4e <USART_0_write+0x4>
		;
	USART1.TXDATAL = data;
 a54:	80 93 22 08 	sts	0x0822, r24	; 0x800822 <__TEXT_REGION_LENGTH__+0x7f4822>
 a58:	08 95       	ret

00000a5a <__subsf3>:
 a5a:	50 58       	subi	r21, 0x80	; 128

00000a5c <__addsf3>:
 a5c:	bb 27       	eor	r27, r27
 a5e:	aa 27       	eor	r26, r26
 a60:	0e 94 45 05 	call	0xa8a	; 0xa8a <__addsf3x>
 a64:	0c 94 bf 06 	jmp	0xd7e	; 0xd7e <__fp_round>
 a68:	0e 94 b1 06 	call	0xd62	; 0xd62 <__fp_pscA>
 a6c:	38 f0       	brcs	.+14     	; 0xa7c <__addsf3+0x20>
 a6e:	0e 94 b8 06 	call	0xd70	; 0xd70 <__fp_pscB>
 a72:	20 f0       	brcs	.+8      	; 0xa7c <__addsf3+0x20>
 a74:	39 f4       	brne	.+14     	; 0xa84 <__addsf3+0x28>
 a76:	9f 3f       	cpi	r25, 0xFF	; 255
 a78:	19 f4       	brne	.+6      	; 0xa80 <__addsf3+0x24>
 a7a:	26 f4       	brtc	.+8      	; 0xa84 <__addsf3+0x28>
 a7c:	0c 94 ae 06 	jmp	0xd5c	; 0xd5c <__fp_nan>
 a80:	0e f4       	brtc	.+2      	; 0xa84 <__addsf3+0x28>
 a82:	e0 95       	com	r30
 a84:	e7 fb       	bst	r30, 7
 a86:	0c 94 a8 06 	jmp	0xd50	; 0xd50 <__fp_inf>

00000a8a <__addsf3x>:
 a8a:	e9 2f       	mov	r30, r25
 a8c:	0e 94 d0 06 	call	0xda0	; 0xda0 <__fp_split3>
 a90:	58 f3       	brcs	.-42     	; 0xa68 <__addsf3+0xc>
 a92:	ba 17       	cp	r27, r26
 a94:	62 07       	cpc	r22, r18
 a96:	73 07       	cpc	r23, r19
 a98:	84 07       	cpc	r24, r20
 a9a:	95 07       	cpc	r25, r21
 a9c:	20 f0       	brcs	.+8      	; 0xaa6 <__addsf3x+0x1c>
 a9e:	79 f4       	brne	.+30     	; 0xabe <__addsf3x+0x34>
 aa0:	a6 f5       	brtc	.+104    	; 0xb0a <__addsf3x+0x80>
 aa2:	0c 94 f2 06 	jmp	0xde4	; 0xde4 <__fp_zero>
 aa6:	0e f4       	brtc	.+2      	; 0xaaa <__addsf3x+0x20>
 aa8:	e0 95       	com	r30
 aaa:	0b 2e       	mov	r0, r27
 aac:	ba 2f       	mov	r27, r26
 aae:	a0 2d       	mov	r26, r0
 ab0:	0b 01       	movw	r0, r22
 ab2:	b9 01       	movw	r22, r18
 ab4:	90 01       	movw	r18, r0
 ab6:	0c 01       	movw	r0, r24
 ab8:	ca 01       	movw	r24, r20
 aba:	a0 01       	movw	r20, r0
 abc:	11 24       	eor	r1, r1
 abe:	ff 27       	eor	r31, r31
 ac0:	59 1b       	sub	r21, r25
 ac2:	99 f0       	breq	.+38     	; 0xaea <__addsf3x+0x60>
 ac4:	59 3f       	cpi	r21, 0xF9	; 249
 ac6:	50 f4       	brcc	.+20     	; 0xadc <__addsf3x+0x52>
 ac8:	50 3e       	cpi	r21, 0xE0	; 224
 aca:	68 f1       	brcs	.+90     	; 0xb26 <__addsf3x+0x9c>
 acc:	1a 16       	cp	r1, r26
 ace:	f0 40       	sbci	r31, 0x00	; 0
 ad0:	a2 2f       	mov	r26, r18
 ad2:	23 2f       	mov	r18, r19
 ad4:	34 2f       	mov	r19, r20
 ad6:	44 27       	eor	r20, r20
 ad8:	58 5f       	subi	r21, 0xF8	; 248
 ada:	f3 cf       	rjmp	.-26     	; 0xac2 <__addsf3x+0x38>
 adc:	46 95       	lsr	r20
 ade:	37 95       	ror	r19
 ae0:	27 95       	ror	r18
 ae2:	a7 95       	ror	r26
 ae4:	f0 40       	sbci	r31, 0x00	; 0
 ae6:	53 95       	inc	r21
 ae8:	c9 f7       	brne	.-14     	; 0xadc <__addsf3x+0x52>
 aea:	7e f4       	brtc	.+30     	; 0xb0a <__addsf3x+0x80>
 aec:	1f 16       	cp	r1, r31
 aee:	ba 0b       	sbc	r27, r26
 af0:	62 0b       	sbc	r22, r18
 af2:	73 0b       	sbc	r23, r19
 af4:	84 0b       	sbc	r24, r20
 af6:	ba f0       	brmi	.+46     	; 0xb26 <__addsf3x+0x9c>
 af8:	91 50       	subi	r25, 0x01	; 1
 afa:	a1 f0       	breq	.+40     	; 0xb24 <__addsf3x+0x9a>
 afc:	ff 0f       	add	r31, r31
 afe:	bb 1f       	adc	r27, r27
 b00:	66 1f       	adc	r22, r22
 b02:	77 1f       	adc	r23, r23
 b04:	88 1f       	adc	r24, r24
 b06:	c2 f7       	brpl	.-16     	; 0xaf8 <__addsf3x+0x6e>
 b08:	0e c0       	rjmp	.+28     	; 0xb26 <__addsf3x+0x9c>
 b0a:	ba 0f       	add	r27, r26
 b0c:	62 1f       	adc	r22, r18
 b0e:	73 1f       	adc	r23, r19
 b10:	84 1f       	adc	r24, r20
 b12:	48 f4       	brcc	.+18     	; 0xb26 <__addsf3x+0x9c>
 b14:	87 95       	ror	r24
 b16:	77 95       	ror	r23
 b18:	67 95       	ror	r22
 b1a:	b7 95       	ror	r27
 b1c:	f7 95       	ror	r31
 b1e:	9e 3f       	cpi	r25, 0xFE	; 254
 b20:	08 f0       	brcs	.+2      	; 0xb24 <__addsf3x+0x9a>
 b22:	b0 cf       	rjmp	.-160    	; 0xa84 <__addsf3+0x28>
 b24:	93 95       	inc	r25
 b26:	88 0f       	add	r24, r24
 b28:	08 f0       	brcs	.+2      	; 0xb2c <__addsf3x+0xa2>
 b2a:	99 27       	eor	r25, r25
 b2c:	ee 0f       	add	r30, r30
 b2e:	97 95       	ror	r25
 b30:	87 95       	ror	r24
 b32:	08 95       	ret

00000b34 <__cmpsf2>:
 b34:	0e 94 84 06 	call	0xd08	; 0xd08 <__fp_cmp>
 b38:	08 f4       	brcc	.+2      	; 0xb3c <__cmpsf2+0x8>
 b3a:	81 e0       	ldi	r24, 0x01	; 1
 b3c:	08 95       	ret

00000b3e <__divsf3>:
 b3e:	0e 94 b3 05 	call	0xb66	; 0xb66 <__divsf3x>
 b42:	0c 94 bf 06 	jmp	0xd7e	; 0xd7e <__fp_round>
 b46:	0e 94 b8 06 	call	0xd70	; 0xd70 <__fp_pscB>
 b4a:	58 f0       	brcs	.+22     	; 0xb62 <__divsf3+0x24>
 b4c:	0e 94 b1 06 	call	0xd62	; 0xd62 <__fp_pscA>
 b50:	40 f0       	brcs	.+16     	; 0xb62 <__divsf3+0x24>
 b52:	29 f4       	brne	.+10     	; 0xb5e <__divsf3+0x20>
 b54:	5f 3f       	cpi	r21, 0xFF	; 255
 b56:	29 f0       	breq	.+10     	; 0xb62 <__divsf3+0x24>
 b58:	0c 94 a8 06 	jmp	0xd50	; 0xd50 <__fp_inf>
 b5c:	51 11       	cpse	r21, r1
 b5e:	0c 94 f3 06 	jmp	0xde6	; 0xde6 <__fp_szero>
 b62:	0c 94 ae 06 	jmp	0xd5c	; 0xd5c <__fp_nan>

00000b66 <__divsf3x>:
 b66:	0e 94 d0 06 	call	0xda0	; 0xda0 <__fp_split3>
 b6a:	68 f3       	brcs	.-38     	; 0xb46 <__divsf3+0x8>

00000b6c <__divsf3_pse>:
 b6c:	99 23       	and	r25, r25
 b6e:	b1 f3       	breq	.-20     	; 0xb5c <__divsf3+0x1e>
 b70:	55 23       	and	r21, r21
 b72:	91 f3       	breq	.-28     	; 0xb58 <__divsf3+0x1a>
 b74:	95 1b       	sub	r25, r21
 b76:	55 0b       	sbc	r21, r21
 b78:	bb 27       	eor	r27, r27
 b7a:	aa 27       	eor	r26, r26
 b7c:	62 17       	cp	r22, r18
 b7e:	73 07       	cpc	r23, r19
 b80:	84 07       	cpc	r24, r20
 b82:	38 f0       	brcs	.+14     	; 0xb92 <__divsf3_pse+0x26>
 b84:	9f 5f       	subi	r25, 0xFF	; 255
 b86:	5f 4f       	sbci	r21, 0xFF	; 255
 b88:	22 0f       	add	r18, r18
 b8a:	33 1f       	adc	r19, r19
 b8c:	44 1f       	adc	r20, r20
 b8e:	aa 1f       	adc	r26, r26
 b90:	a9 f3       	breq	.-22     	; 0xb7c <__divsf3_pse+0x10>
 b92:	35 d0       	rcall	.+106    	; 0xbfe <__divsf3_pse+0x92>
 b94:	0e 2e       	mov	r0, r30
 b96:	3a f0       	brmi	.+14     	; 0xba6 <__divsf3_pse+0x3a>
 b98:	e0 e8       	ldi	r30, 0x80	; 128
 b9a:	32 d0       	rcall	.+100    	; 0xc00 <__divsf3_pse+0x94>
 b9c:	91 50       	subi	r25, 0x01	; 1
 b9e:	50 40       	sbci	r21, 0x00	; 0
 ba0:	e6 95       	lsr	r30
 ba2:	00 1c       	adc	r0, r0
 ba4:	ca f7       	brpl	.-14     	; 0xb98 <__divsf3_pse+0x2c>
 ba6:	2b d0       	rcall	.+86     	; 0xbfe <__divsf3_pse+0x92>
 ba8:	fe 2f       	mov	r31, r30
 baa:	29 d0       	rcall	.+82     	; 0xbfe <__divsf3_pse+0x92>
 bac:	66 0f       	add	r22, r22
 bae:	77 1f       	adc	r23, r23
 bb0:	88 1f       	adc	r24, r24
 bb2:	bb 1f       	adc	r27, r27
 bb4:	26 17       	cp	r18, r22
 bb6:	37 07       	cpc	r19, r23
 bb8:	48 07       	cpc	r20, r24
 bba:	ab 07       	cpc	r26, r27
 bbc:	b0 e8       	ldi	r27, 0x80	; 128
 bbe:	09 f0       	breq	.+2      	; 0xbc2 <__divsf3_pse+0x56>
 bc0:	bb 0b       	sbc	r27, r27
 bc2:	80 2d       	mov	r24, r0
 bc4:	bf 01       	movw	r22, r30
 bc6:	ff 27       	eor	r31, r31
 bc8:	93 58       	subi	r25, 0x83	; 131
 bca:	5f 4f       	sbci	r21, 0xFF	; 255
 bcc:	3a f0       	brmi	.+14     	; 0xbdc <__divsf3_pse+0x70>
 bce:	9e 3f       	cpi	r25, 0xFE	; 254
 bd0:	51 05       	cpc	r21, r1
 bd2:	78 f0       	brcs	.+30     	; 0xbf2 <__divsf3_pse+0x86>
 bd4:	0c 94 a8 06 	jmp	0xd50	; 0xd50 <__fp_inf>
 bd8:	0c 94 f3 06 	jmp	0xde6	; 0xde6 <__fp_szero>
 bdc:	5f 3f       	cpi	r21, 0xFF	; 255
 bde:	e4 f3       	brlt	.-8      	; 0xbd8 <__divsf3_pse+0x6c>
 be0:	98 3e       	cpi	r25, 0xE8	; 232
 be2:	d4 f3       	brlt	.-12     	; 0xbd8 <__divsf3_pse+0x6c>
 be4:	86 95       	lsr	r24
 be6:	77 95       	ror	r23
 be8:	67 95       	ror	r22
 bea:	b7 95       	ror	r27
 bec:	f7 95       	ror	r31
 bee:	9f 5f       	subi	r25, 0xFF	; 255
 bf0:	c9 f7       	brne	.-14     	; 0xbe4 <__divsf3_pse+0x78>
 bf2:	88 0f       	add	r24, r24
 bf4:	91 1d       	adc	r25, r1
 bf6:	96 95       	lsr	r25
 bf8:	87 95       	ror	r24
 bfa:	97 f9       	bld	r25, 7
 bfc:	08 95       	ret
 bfe:	e1 e0       	ldi	r30, 0x01	; 1
 c00:	66 0f       	add	r22, r22
 c02:	77 1f       	adc	r23, r23
 c04:	88 1f       	adc	r24, r24
 c06:	bb 1f       	adc	r27, r27
 c08:	62 17       	cp	r22, r18
 c0a:	73 07       	cpc	r23, r19
 c0c:	84 07       	cpc	r24, r20
 c0e:	ba 07       	cpc	r27, r26
 c10:	20 f0       	brcs	.+8      	; 0xc1a <__divsf3_pse+0xae>
 c12:	62 1b       	sub	r22, r18
 c14:	73 0b       	sbc	r23, r19
 c16:	84 0b       	sbc	r24, r20
 c18:	ba 0b       	sbc	r27, r26
 c1a:	ee 1f       	adc	r30, r30
 c1c:	88 f7       	brcc	.-30     	; 0xc00 <__divsf3_pse+0x94>
 c1e:	e0 95       	com	r30
 c20:	08 95       	ret

00000c22 <__fixsfsi>:
 c22:	0e 94 18 06 	call	0xc30	; 0xc30 <__fixunssfsi>
 c26:	68 94       	set
 c28:	b1 11       	cpse	r27, r1
 c2a:	0c 94 f3 06 	jmp	0xde6	; 0xde6 <__fp_szero>
 c2e:	08 95       	ret

00000c30 <__fixunssfsi>:
 c30:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__fp_splitA>
 c34:	88 f0       	brcs	.+34     	; 0xc58 <__fixunssfsi+0x28>
 c36:	9f 57       	subi	r25, 0x7F	; 127
 c38:	98 f0       	brcs	.+38     	; 0xc60 <__fixunssfsi+0x30>
 c3a:	b9 2f       	mov	r27, r25
 c3c:	99 27       	eor	r25, r25
 c3e:	b7 51       	subi	r27, 0x17	; 23
 c40:	b0 f0       	brcs	.+44     	; 0xc6e <__fixunssfsi+0x3e>
 c42:	e1 f0       	breq	.+56     	; 0xc7c <__fixunssfsi+0x4c>
 c44:	66 0f       	add	r22, r22
 c46:	77 1f       	adc	r23, r23
 c48:	88 1f       	adc	r24, r24
 c4a:	99 1f       	adc	r25, r25
 c4c:	1a f0       	brmi	.+6      	; 0xc54 <__fixunssfsi+0x24>
 c4e:	ba 95       	dec	r27
 c50:	c9 f7       	brne	.-14     	; 0xc44 <__fixunssfsi+0x14>
 c52:	14 c0       	rjmp	.+40     	; 0xc7c <__fixunssfsi+0x4c>
 c54:	b1 30       	cpi	r27, 0x01	; 1
 c56:	91 f0       	breq	.+36     	; 0xc7c <__fixunssfsi+0x4c>
 c58:	0e 94 f2 06 	call	0xde4	; 0xde4 <__fp_zero>
 c5c:	b1 e0       	ldi	r27, 0x01	; 1
 c5e:	08 95       	ret
 c60:	0c 94 f2 06 	jmp	0xde4	; 0xde4 <__fp_zero>
 c64:	67 2f       	mov	r22, r23
 c66:	78 2f       	mov	r23, r24
 c68:	88 27       	eor	r24, r24
 c6a:	b8 5f       	subi	r27, 0xF8	; 248
 c6c:	39 f0       	breq	.+14     	; 0xc7c <__fixunssfsi+0x4c>
 c6e:	b9 3f       	cpi	r27, 0xF9	; 249
 c70:	cc f3       	brlt	.-14     	; 0xc64 <__fixunssfsi+0x34>
 c72:	86 95       	lsr	r24
 c74:	77 95       	ror	r23
 c76:	67 95       	ror	r22
 c78:	b3 95       	inc	r27
 c7a:	d9 f7       	brne	.-10     	; 0xc72 <__fixunssfsi+0x42>
 c7c:	3e f4       	brtc	.+14     	; 0xc8c <__fixunssfsi+0x5c>
 c7e:	90 95       	com	r25
 c80:	80 95       	com	r24
 c82:	70 95       	com	r23
 c84:	61 95       	neg	r22
 c86:	7f 4f       	sbci	r23, 0xFF	; 255
 c88:	8f 4f       	sbci	r24, 0xFF	; 255
 c8a:	9f 4f       	sbci	r25, 0xFF	; 255
 c8c:	08 95       	ret

00000c8e <__floatunsisf>:
 c8e:	e8 94       	clt
 c90:	09 c0       	rjmp	.+18     	; 0xca4 <__floatsisf+0x12>

00000c92 <__floatsisf>:
 c92:	97 fb       	bst	r25, 7
 c94:	3e f4       	brtc	.+14     	; 0xca4 <__floatsisf+0x12>
 c96:	90 95       	com	r25
 c98:	80 95       	com	r24
 c9a:	70 95       	com	r23
 c9c:	61 95       	neg	r22
 c9e:	7f 4f       	sbci	r23, 0xFF	; 255
 ca0:	8f 4f       	sbci	r24, 0xFF	; 255
 ca2:	9f 4f       	sbci	r25, 0xFF	; 255
 ca4:	99 23       	and	r25, r25
 ca6:	a9 f0       	breq	.+42     	; 0xcd2 <__floatsisf+0x40>
 ca8:	f9 2f       	mov	r31, r25
 caa:	96 e9       	ldi	r25, 0x96	; 150
 cac:	bb 27       	eor	r27, r27
 cae:	93 95       	inc	r25
 cb0:	f6 95       	lsr	r31
 cb2:	87 95       	ror	r24
 cb4:	77 95       	ror	r23
 cb6:	67 95       	ror	r22
 cb8:	b7 95       	ror	r27
 cba:	f1 11       	cpse	r31, r1
 cbc:	f8 cf       	rjmp	.-16     	; 0xcae <__floatsisf+0x1c>
 cbe:	fa f4       	brpl	.+62     	; 0xcfe <__floatsisf+0x6c>
 cc0:	bb 0f       	add	r27, r27
 cc2:	11 f4       	brne	.+4      	; 0xcc8 <__floatsisf+0x36>
 cc4:	60 ff       	sbrs	r22, 0
 cc6:	1b c0       	rjmp	.+54     	; 0xcfe <__floatsisf+0x6c>
 cc8:	6f 5f       	subi	r22, 0xFF	; 255
 cca:	7f 4f       	sbci	r23, 0xFF	; 255
 ccc:	8f 4f       	sbci	r24, 0xFF	; 255
 cce:	9f 4f       	sbci	r25, 0xFF	; 255
 cd0:	16 c0       	rjmp	.+44     	; 0xcfe <__floatsisf+0x6c>
 cd2:	88 23       	and	r24, r24
 cd4:	11 f0       	breq	.+4      	; 0xcda <__floatsisf+0x48>
 cd6:	96 e9       	ldi	r25, 0x96	; 150
 cd8:	11 c0       	rjmp	.+34     	; 0xcfc <__floatsisf+0x6a>
 cda:	77 23       	and	r23, r23
 cdc:	21 f0       	breq	.+8      	; 0xce6 <__floatsisf+0x54>
 cde:	9e e8       	ldi	r25, 0x8E	; 142
 ce0:	87 2f       	mov	r24, r23
 ce2:	76 2f       	mov	r23, r22
 ce4:	05 c0       	rjmp	.+10     	; 0xcf0 <__floatsisf+0x5e>
 ce6:	66 23       	and	r22, r22
 ce8:	71 f0       	breq	.+28     	; 0xd06 <__floatsisf+0x74>
 cea:	96 e8       	ldi	r25, 0x86	; 134
 cec:	86 2f       	mov	r24, r22
 cee:	70 e0       	ldi	r23, 0x00	; 0
 cf0:	60 e0       	ldi	r22, 0x00	; 0
 cf2:	2a f0       	brmi	.+10     	; 0xcfe <__floatsisf+0x6c>
 cf4:	9a 95       	dec	r25
 cf6:	66 0f       	add	r22, r22
 cf8:	77 1f       	adc	r23, r23
 cfa:	88 1f       	adc	r24, r24
 cfc:	da f7       	brpl	.-10     	; 0xcf4 <__floatsisf+0x62>
 cfe:	88 0f       	add	r24, r24
 d00:	96 95       	lsr	r25
 d02:	87 95       	ror	r24
 d04:	97 f9       	bld	r25, 7
 d06:	08 95       	ret

00000d08 <__fp_cmp>:
 d08:	99 0f       	add	r25, r25
 d0a:	00 08       	sbc	r0, r0
 d0c:	55 0f       	add	r21, r21
 d0e:	aa 0b       	sbc	r26, r26
 d10:	e0 e8       	ldi	r30, 0x80	; 128
 d12:	fe ef       	ldi	r31, 0xFE	; 254
 d14:	16 16       	cp	r1, r22
 d16:	17 06       	cpc	r1, r23
 d18:	e8 07       	cpc	r30, r24
 d1a:	f9 07       	cpc	r31, r25
 d1c:	c0 f0       	brcs	.+48     	; 0xd4e <__fp_cmp+0x46>
 d1e:	12 16       	cp	r1, r18
 d20:	13 06       	cpc	r1, r19
 d22:	e4 07       	cpc	r30, r20
 d24:	f5 07       	cpc	r31, r21
 d26:	98 f0       	brcs	.+38     	; 0xd4e <__fp_cmp+0x46>
 d28:	62 1b       	sub	r22, r18
 d2a:	73 0b       	sbc	r23, r19
 d2c:	84 0b       	sbc	r24, r20
 d2e:	95 0b       	sbc	r25, r21
 d30:	39 f4       	brne	.+14     	; 0xd40 <__fp_cmp+0x38>
 d32:	0a 26       	eor	r0, r26
 d34:	61 f0       	breq	.+24     	; 0xd4e <__fp_cmp+0x46>
 d36:	23 2b       	or	r18, r19
 d38:	24 2b       	or	r18, r20
 d3a:	25 2b       	or	r18, r21
 d3c:	21 f4       	brne	.+8      	; 0xd46 <__fp_cmp+0x3e>
 d3e:	08 95       	ret
 d40:	0a 26       	eor	r0, r26
 d42:	09 f4       	brne	.+2      	; 0xd46 <__fp_cmp+0x3e>
 d44:	a1 40       	sbci	r26, 0x01	; 1
 d46:	a6 95       	lsr	r26
 d48:	8f ef       	ldi	r24, 0xFF	; 255
 d4a:	81 1d       	adc	r24, r1
 d4c:	81 1d       	adc	r24, r1
 d4e:	08 95       	ret

00000d50 <__fp_inf>:
 d50:	97 f9       	bld	r25, 7
 d52:	9f 67       	ori	r25, 0x7F	; 127
 d54:	80 e8       	ldi	r24, 0x80	; 128
 d56:	70 e0       	ldi	r23, 0x00	; 0
 d58:	60 e0       	ldi	r22, 0x00	; 0
 d5a:	08 95       	ret

00000d5c <__fp_nan>:
 d5c:	9f ef       	ldi	r25, 0xFF	; 255
 d5e:	80 ec       	ldi	r24, 0xC0	; 192
 d60:	08 95       	ret

00000d62 <__fp_pscA>:
 d62:	00 24       	eor	r0, r0
 d64:	0a 94       	dec	r0
 d66:	16 16       	cp	r1, r22
 d68:	17 06       	cpc	r1, r23
 d6a:	18 06       	cpc	r1, r24
 d6c:	09 06       	cpc	r0, r25
 d6e:	08 95       	ret

00000d70 <__fp_pscB>:
 d70:	00 24       	eor	r0, r0
 d72:	0a 94       	dec	r0
 d74:	12 16       	cp	r1, r18
 d76:	13 06       	cpc	r1, r19
 d78:	14 06       	cpc	r1, r20
 d7a:	05 06       	cpc	r0, r21
 d7c:	08 95       	ret

00000d7e <__fp_round>:
 d7e:	09 2e       	mov	r0, r25
 d80:	03 94       	inc	r0
 d82:	00 0c       	add	r0, r0
 d84:	11 f4       	brne	.+4      	; 0xd8a <__fp_round+0xc>
 d86:	88 23       	and	r24, r24
 d88:	52 f0       	brmi	.+20     	; 0xd9e <__fp_round+0x20>
 d8a:	bb 0f       	add	r27, r27
 d8c:	40 f4       	brcc	.+16     	; 0xd9e <__fp_round+0x20>
 d8e:	bf 2b       	or	r27, r31
 d90:	11 f4       	brne	.+4      	; 0xd96 <__fp_round+0x18>
 d92:	60 ff       	sbrs	r22, 0
 d94:	04 c0       	rjmp	.+8      	; 0xd9e <__fp_round+0x20>
 d96:	6f 5f       	subi	r22, 0xFF	; 255
 d98:	7f 4f       	sbci	r23, 0xFF	; 255
 d9a:	8f 4f       	sbci	r24, 0xFF	; 255
 d9c:	9f 4f       	sbci	r25, 0xFF	; 255
 d9e:	08 95       	ret

00000da0 <__fp_split3>:
 da0:	57 fd       	sbrc	r21, 7
 da2:	90 58       	subi	r25, 0x80	; 128
 da4:	44 0f       	add	r20, r20
 da6:	55 1f       	adc	r21, r21
 da8:	59 f0       	breq	.+22     	; 0xdc0 <__fp_splitA+0x10>
 daa:	5f 3f       	cpi	r21, 0xFF	; 255
 dac:	71 f0       	breq	.+28     	; 0xdca <__fp_splitA+0x1a>
 dae:	47 95       	ror	r20

00000db0 <__fp_splitA>:
 db0:	88 0f       	add	r24, r24
 db2:	97 fb       	bst	r25, 7
 db4:	99 1f       	adc	r25, r25
 db6:	61 f0       	breq	.+24     	; 0xdd0 <__fp_splitA+0x20>
 db8:	9f 3f       	cpi	r25, 0xFF	; 255
 dba:	79 f0       	breq	.+30     	; 0xdda <__fp_splitA+0x2a>
 dbc:	87 95       	ror	r24
 dbe:	08 95       	ret
 dc0:	12 16       	cp	r1, r18
 dc2:	13 06       	cpc	r1, r19
 dc4:	14 06       	cpc	r1, r20
 dc6:	55 1f       	adc	r21, r21
 dc8:	f2 cf       	rjmp	.-28     	; 0xdae <__fp_split3+0xe>
 dca:	46 95       	lsr	r20
 dcc:	f1 df       	rcall	.-30     	; 0xdb0 <__fp_splitA>
 dce:	08 c0       	rjmp	.+16     	; 0xde0 <__fp_splitA+0x30>
 dd0:	16 16       	cp	r1, r22
 dd2:	17 06       	cpc	r1, r23
 dd4:	18 06       	cpc	r1, r24
 dd6:	99 1f       	adc	r25, r25
 dd8:	f1 cf       	rjmp	.-30     	; 0xdbc <__fp_splitA+0xc>
 dda:	86 95       	lsr	r24
 ddc:	71 05       	cpc	r23, r1
 dde:	61 05       	cpc	r22, r1
 de0:	08 94       	sec
 de2:	08 95       	ret

00000de4 <__fp_zero>:
 de4:	e8 94       	clt

00000de6 <__fp_szero>:
 de6:	bb 27       	eor	r27, r27
 de8:	66 27       	eor	r22, r22
 dea:	77 27       	eor	r23, r23
 dec:	cb 01       	movw	r24, r22
 dee:	97 f9       	bld	r25, 7
 df0:	08 95       	ret

00000df2 <__mulsf3>:
 df2:	0e 94 0c 07 	call	0xe18	; 0xe18 <__mulsf3x>
 df6:	0c 94 bf 06 	jmp	0xd7e	; 0xd7e <__fp_round>
 dfa:	0e 94 b1 06 	call	0xd62	; 0xd62 <__fp_pscA>
 dfe:	38 f0       	brcs	.+14     	; 0xe0e <__mulsf3+0x1c>
 e00:	0e 94 b8 06 	call	0xd70	; 0xd70 <__fp_pscB>
 e04:	20 f0       	brcs	.+8      	; 0xe0e <__mulsf3+0x1c>
 e06:	95 23       	and	r25, r21
 e08:	11 f0       	breq	.+4      	; 0xe0e <__mulsf3+0x1c>
 e0a:	0c 94 a8 06 	jmp	0xd50	; 0xd50 <__fp_inf>
 e0e:	0c 94 ae 06 	jmp	0xd5c	; 0xd5c <__fp_nan>
 e12:	11 24       	eor	r1, r1
 e14:	0c 94 f3 06 	jmp	0xde6	; 0xde6 <__fp_szero>

00000e18 <__mulsf3x>:
 e18:	0e 94 d0 06 	call	0xda0	; 0xda0 <__fp_split3>
 e1c:	70 f3       	brcs	.-36     	; 0xdfa <__mulsf3+0x8>

00000e1e <__mulsf3_pse>:
 e1e:	95 9f       	mul	r25, r21
 e20:	c1 f3       	breq	.-16     	; 0xe12 <__mulsf3+0x20>
 e22:	95 0f       	add	r25, r21
 e24:	50 e0       	ldi	r21, 0x00	; 0
 e26:	55 1f       	adc	r21, r21
 e28:	62 9f       	mul	r22, r18
 e2a:	f0 01       	movw	r30, r0
 e2c:	72 9f       	mul	r23, r18
 e2e:	bb 27       	eor	r27, r27
 e30:	f0 0d       	add	r31, r0
 e32:	b1 1d       	adc	r27, r1
 e34:	63 9f       	mul	r22, r19
 e36:	aa 27       	eor	r26, r26
 e38:	f0 0d       	add	r31, r0
 e3a:	b1 1d       	adc	r27, r1
 e3c:	aa 1f       	adc	r26, r26
 e3e:	64 9f       	mul	r22, r20
 e40:	66 27       	eor	r22, r22
 e42:	b0 0d       	add	r27, r0
 e44:	a1 1d       	adc	r26, r1
 e46:	66 1f       	adc	r22, r22
 e48:	82 9f       	mul	r24, r18
 e4a:	22 27       	eor	r18, r18
 e4c:	b0 0d       	add	r27, r0
 e4e:	a1 1d       	adc	r26, r1
 e50:	62 1f       	adc	r22, r18
 e52:	73 9f       	mul	r23, r19
 e54:	b0 0d       	add	r27, r0
 e56:	a1 1d       	adc	r26, r1
 e58:	62 1f       	adc	r22, r18
 e5a:	83 9f       	mul	r24, r19
 e5c:	a0 0d       	add	r26, r0
 e5e:	61 1d       	adc	r22, r1
 e60:	22 1f       	adc	r18, r18
 e62:	74 9f       	mul	r23, r20
 e64:	33 27       	eor	r19, r19
 e66:	a0 0d       	add	r26, r0
 e68:	61 1d       	adc	r22, r1
 e6a:	23 1f       	adc	r18, r19
 e6c:	84 9f       	mul	r24, r20
 e6e:	60 0d       	add	r22, r0
 e70:	21 1d       	adc	r18, r1
 e72:	82 2f       	mov	r24, r18
 e74:	76 2f       	mov	r23, r22
 e76:	6a 2f       	mov	r22, r26
 e78:	11 24       	eor	r1, r1
 e7a:	9f 57       	subi	r25, 0x7F	; 127
 e7c:	50 40       	sbci	r21, 0x00	; 0
 e7e:	9a f0       	brmi	.+38     	; 0xea6 <__mulsf3_pse+0x88>
 e80:	f1 f0       	breq	.+60     	; 0xebe <__mulsf3_pse+0xa0>
 e82:	88 23       	and	r24, r24
 e84:	4a f0       	brmi	.+18     	; 0xe98 <__mulsf3_pse+0x7a>
 e86:	ee 0f       	add	r30, r30
 e88:	ff 1f       	adc	r31, r31
 e8a:	bb 1f       	adc	r27, r27
 e8c:	66 1f       	adc	r22, r22
 e8e:	77 1f       	adc	r23, r23
 e90:	88 1f       	adc	r24, r24
 e92:	91 50       	subi	r25, 0x01	; 1
 e94:	50 40       	sbci	r21, 0x00	; 0
 e96:	a9 f7       	brne	.-22     	; 0xe82 <__mulsf3_pse+0x64>
 e98:	9e 3f       	cpi	r25, 0xFE	; 254
 e9a:	51 05       	cpc	r21, r1
 e9c:	80 f0       	brcs	.+32     	; 0xebe <__mulsf3_pse+0xa0>
 e9e:	0c 94 a8 06 	jmp	0xd50	; 0xd50 <__fp_inf>
 ea2:	0c 94 f3 06 	jmp	0xde6	; 0xde6 <__fp_szero>
 ea6:	5f 3f       	cpi	r21, 0xFF	; 255
 ea8:	e4 f3       	brlt	.-8      	; 0xea2 <__mulsf3_pse+0x84>
 eaa:	98 3e       	cpi	r25, 0xE8	; 232
 eac:	d4 f3       	brlt	.-12     	; 0xea2 <__mulsf3_pse+0x84>
 eae:	86 95       	lsr	r24
 eb0:	77 95       	ror	r23
 eb2:	67 95       	ror	r22
 eb4:	b7 95       	ror	r27
 eb6:	f7 95       	ror	r31
 eb8:	e7 95       	ror	r30
 eba:	9f 5f       	subi	r25, 0xFF	; 255
 ebc:	c1 f7       	brne	.-16     	; 0xeae <__mulsf3_pse+0x90>
 ebe:	fe 2b       	or	r31, r30
 ec0:	88 0f       	add	r24, r24
 ec2:	91 1d       	adc	r25, r1
 ec4:	96 95       	lsr	r25
 ec6:	87 95       	ror	r24
 ec8:	97 f9       	bld	r25, 7
 eca:	08 95       	ret

00000ecc <_exit>:
 ecc:	f8 94       	cli

00000ece <__stop_program>:
 ece:	ff cf       	rjmp	.-2      	; 0xece <__stop_program>
